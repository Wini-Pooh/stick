<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
                [
                    [
                        'text' => 'üìã –ü—Ä–∞–≤–∏–ª–∞',
                        'callback_data' => 'rules'
                    ],
                    [
                        'text' => 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                        'callback_data' => 'lotto_stats'
                    ]
                ]
            ]
        ];

        $this->sendMessage($chatId, $message, $keyboard);
    }elegramUser;
use App\Models\TelegramUserActivity;

class TelegramBotController extends Controller
{
    private $botToken;
    private $botUrl;

    public function __construct()
    {
        $this->botToken = env('TELEGRAM_BOT_TOKEN' , '8410914085:AAEkR3kyRw-lvb8WRP0MRQugvpEH-fkhLp4');
        $this->botUrl = "https://api.telegram.org/bot{$this->botToken}";
    }

    /**
     * Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
     */
    public function webhook(Request $request)
    {
        $update = $request->all();
        Log::info('Telegram webhook received', $update);

        if (isset($update['message'])) {
            $this->handleMessage($update['message']);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout_query –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π –∑–≤—ë–∑–¥–∞–º–∏
        if (isset($update['pre_checkout_query'])) {
            $this->handlePreCheckoutQuery($update['pre_checkout_query']);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        if (isset($update['message']['successful_payment'])) {
            $this->handleSuccessfulPayment($update['message']);
        }

        return response()->json(['ok' => true]);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    private function handleMessage($message)
    {
        $chatId = $message['chat']['id'];
        $text = $message['text'] ?? '';
        $user = $message['from'] ?? null;

        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        $telegramUser = null;
        if ($user) {
            $fakeInitData = [
                'user' => json_encode($user),
                'auth_date' => time(),
            ];
            $telegramUser = TelegramUser::createOrUpdate($fakeInitData);
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if ($telegramUser) {
                TelegramUserActivity::log(
                    $telegramUser,
                    'bot_message',
                    'telegram.webhook',
                    [
                        'message_text' => $text,
                        'chat_id' => $chatId,
                        'message_id' => $message['message_id'] ?? null,
                    ]
                );
            }
        }

        switch ($text) {
            case '/start':
                $this->sendWelcomeMessage($chatId, $telegramUser);
                break;
                
            case '/miniapp':
                $this->sendMiniAppButton($chatId);
                break;

            case '/stats':
                $this->sendStats($chatId);
                break;

            case '/terms':
                $this->sendTerms($chatId);
                break;

            case '/support':
                $this->sendSupport($chatId);
                break;
                
            default:
                $this->sendMiniAppButton($chatId);
                break;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private function sendWelcomeMessage($chatId, $telegramUser = null)
    {
        $userName = $telegramUser ? $telegramUser->first_name : '–¥—Ä—É–≥';
        $visitCount = $telegramUser ? $telegramUser->visits_count : 1;
        
        $message = "‚≠ê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ó–≤—ë–∑–¥–Ω–æ–µ –õ–æ—Ç–æ, {$userName}!\n\n";
        $message .= "üé∞ –î–æ–Ω–∞—Ç—å—Ç–µ –∑–≤—ë–∑–¥—ã Telegram –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö —Å —à–∞–Ω—Å–æ–º —É–¥–≤–æ–∏—Ç—å, —É—Ç—Ä–æ–∏—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≤ 10 —Ä–∞–∑ –±–æ–ª—å—à–µ –∑–≤—ë–∑–¥!\n\n";
        $message .= "üéØ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –ª–æ—Ç–æ:\n";
        $message .= "‚Ä¢ –ß–µ—Å—Ç–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00 –ú–°–ö\n";
        $message .= "‚Ä¢ –†–∞–∑–Ω—ã–µ –∏–≥—Ä—ã —Å –º–Ω–æ–∂–∏—Ç–µ–ª—è–º–∏ x2, x3, x5, x10, x20\n";
        $message .= "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–µ–π\n";
        $message .= "‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π\n\n";
        $message .= "–≠—Ç–æ –≤–∞—à –≤–∏–∑–∏—Ç #{$visitCount}. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å:";

        $keyboard = [
            'inline_keyboard' => [
                [
                    [
                        'text' => 'üé∞ –ò–≥—Ä–∞—Ç—å –≤ –ª–æ—Ç–æ',
                        'web_app' => [
                            'url' => env('APP_URL') . '/miniapp'
                        ]
                    ]
                ],
                [
                    [
                        'text' => 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                        'callback_data' => 'lotto_stats'
                    ],
                    [
                        'text' => 'üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã',
                        'callback_data' => 'lotto_results'
                    ]
                ]
            ]
        ];

        $this->sendMessage($chatId, $message, $keyboard);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App
     */
    private function sendMiniAppButton($chatId)
    {
        $message = "ÔøΩ –û—Ç–∫—Ä–æ–π—Ç–µ –ó–≤—ë–∑–¥–Ω–æ–µ –õ–æ—Ç–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≤–æ—é —É–¥–∞—á—É!\n\n";
        $message .= "‚≠ê –î–æ–Ω–∞—Ç—å—Ç–µ –∑–≤—ë–∑–¥—ã –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö!";

        $keyboard = [
            'inline_keyboard' => [
                [
                    [
                        'text' => 'üé∞ –ó–≤—ë–∑–¥–Ω–æ–µ –õ–æ—Ç–æ',
                        'web_app' => [
                            'url' => env('APP_URL') . '/miniapp'
                        ]
                    ]
                ],
                [
                    [
                        'text' => 'ÔøΩ –ü—Ä–∞–≤–∏–ª–∞',
                        'callback_data' => 'rules'
                    ],
                    [
                        'text' => 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                        'callback_data' => 'lotto_stats'
                    ]
                ]
            ]
        ];

        $this->sendMessage($chatId, $message, $keyboard);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    private function sendStats($chatId)
    {
        try {
            $totalUsers = TelegramUser::count();
            $activeToday = TelegramUser::whereDate('last_seen_at', today())->count();
            $newToday = TelegramUser::whereDate('first_seen_at', today())->count();
            $totalActivities = TelegramUserActivity::count();
            
            $message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Mini App:</b>\n\n";
            $message .= "üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {$totalUsers}\n";
            $message .= "üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {$activeToday}\n";
            $message .= "üÜï –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {$newToday}\n";
            $message .= "üìà –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {$totalActivities}\n\n";
            $message .= "üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: " . now()->format('d.m.Y H:i');
            
            $this->sendMessage($chatId, $message);
        } catch (\Exception $e) {
            $this->sendMessage($chatId, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: " . $e->getMessage());
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private function sendMessage($chatId, $text, $keyboard = null)
    {
        $params = [
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML'
        ];

        if ($keyboard) {
            $params['reply_markup'] = json_encode($keyboard);
        }

        Http::post($this->botUrl . '/sendMessage', $params);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
     */
    public function setWebhook()
    {
        $webhookUrl = env('APP_URL') . '/api/telegram/webhook';
        
        $response = Http::post($this->botUrl . '/setWebhook', [
            'url' => $webhookUrl,
            'allowed_updates' => [
                'message',
                'edited_message', 
                'callback_query',
                'inline_query',
                'pre_checkout_query',     // –ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è Stars –ø–ª–∞—Ç–µ–∂–µ–π!
                'successful_payment'      // –ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è Stars –ø–ª–∞—Ç–µ–∂–µ–π!
            ]
        ]);

        return response()->json([
            'success' => $response->successful(),
            'webhook_url' => $webhookUrl,
            'response' => $response->json()
        ]);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
     */
    public function getWebhookInfo()
    {
        $response = Http::get($this->botUrl . '/getWebhookInfo');
        
        return response()->json($response->json());
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ webhook
     */
    public function deleteWebhook()
    {
        $response = Http::post($this->botUrl . '/deleteWebhook');
        
        return response()->json($response->json());
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π –∑–≤—ë–∑–¥–∞–º–∏
     */
    private function handlePreCheckoutQuery($preCheckoutQuery)
    {
        $queryId = $preCheckoutQuery['id'];
        $payload = json_decode($preCheckoutQuery['invoice_payload'], true);

        Log::info('Pre-checkout query received', [
            'query_id' => $queryId,
            'payload' => $payload,
            'total_amount' => $preCheckoutQuery['total_amount'],
        ]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∏–ª–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω
        if (isset($payload['ticket_id'])) {
            $ticket = \App\Models\LottoTicket::find($payload['ticket_id']);
            
            if (!$ticket || $ticket->status !== 'pending') {
                Http::post($this->botUrl . '/answerPreCheckoutQuery', [
                    'pre_checkout_query_id' => $queryId,
                    'ok' => false,
                    'error_message' => '–ë–∏–ª–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω',
                ]);
                return;
            }
        }

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É
        Http::post($this->botUrl . '/answerPreCheckoutQuery', [
            'pre_checkout_query_id' => $queryId,
            'ok' => true,
        ]);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
     */
    private function handleSuccessfulPayment($message)
    {
        $payment = $message['successful_payment'];
        $payload = json_decode($payment['invoice_payload'], true);

        Log::info('Successful payment received', [
            'payload' => $payload,
            'payment' => $payment,
            'chat_id' => $message['chat']['id'],
        ]);

        if (isset($payload['ticket_id'])) {
            $ticket = \App\Models\LottoTicket::find($payload['ticket_id']);
            
            if (!$ticket) {
                Log::error('Ticket not found for successful payment', $payload);
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∏–ª–µ—Ç
            $ticket->update([
                'status' => 'participating',
                'purchased_at' => now(),
                'payment_charge_id' => $payment['telegram_payment_charge_id'],
                'payment_data' => $payment,
            ]);

            // –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            \App\Models\LottoDraw::getOrCreateTodayDraw($ticket->lotto_game_id);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            $this->sendPaymentConfirmation($message['chat']['id'], $ticket);

            Log::info('Lotto ticket payment confirmed', [
                'ticket_id' => $ticket->id,
                'ticket_number' => $ticket->ticket_number,
                'user_id' => $ticket->telegram_user_id,
            ]);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
     */
    private function sendPaymentConfirmation($chatId, $ticket)
    {
        $game = $ticket->lottoGame;
        
        $text = "üéüÔ∏è –ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!\n\n";
        $text .= "üìÑ –ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞: {$ticket->ticket_number}\n";
        $text .= "üé∞ –ò–≥—Ä–∞: {$game->name}\n";
        $text .= "üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: {$game->getPotentialWinnings()} ‚≠ê\n";
        $text .= "üé≤ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞: " . ($game->win_chance * 100) . "%\n\n";
        $text .= "‚è∞ –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–π–¥—ë—Ç —Å–µ–≥–æ–¥–Ω—è –≤ 23:00 –ú–°–ö\n";
        $text .= "üçÄ –£–¥–∞—á–∏!";

        Http::post($this->botUrl . '/sendMessage', [
            'chat_id' => $chatId,
            'text' => $text,
        ]);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     */
    private function sendTerms($chatId)
    {
        $text = "üìã –ü–†–ê–í–ò–õ–ê –ò –£–°–õ–û–í–ò–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø\n\n";
        $text .= "üé∞ **–ó–≤—ë–∑–¥–Ω–æ–µ –õ–æ—Ç–æ** - —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤–µ–∑–µ–Ω–∏—è.\n\n";
        $text .= "üìù –û–°–ù–û–í–ù–´–ï –ü–†–ê–í–ò–õ–ê:\n";
        $text .= "‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∑–∞ Telegram Stars\n";
        $text .= "‚Ä¢ –†–æ–∑—ã–≥—Ä—ã—à–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 23:00 –ú–°–ö\n";
        $text .= "‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º\n";
        $text .= "‚Ä¢ –í—ã–∏–≥—Ä—ã—à –∑–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ Telegram Stars\n\n";
        $text .= "‚ö†Ô∏è –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:\n";
        $text .= "‚Ä¢ –ò–≥—Ä–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –ª–∏—Ü —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç\n";
        $text .= "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–ø–æ—Ä—ã –ª–µ–∂–∏—Ç –Ω–∞ –∏–≥—Ä–æ–∫–µ\n";
        $text .= "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã –∏ –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä—É\n\n";
        $text .= "üí≥ –í–û–ó–í–†–ê–¢ –°–†–ï–î–°–¢–í:\n";
        $text .= "‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫\n";
        $text .= "‚Ä¢ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n\n";
        $text .= "üìû –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /support";

        Http::post($this->botUrl . '/sendMessage', [
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'Markdown',
        ]);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
     */
    private function sendSupport($chatId)
    {
        $text = "üÜò –°–õ–£–ñ–ë–ê –ü–û–î–î–ï–†–ñ–ö–ò\n\n";
        $text .= "–ú—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!\n\n";
        $text .= "üìû –°–ü–û–°–û–ë–´ –°–í–Ø–ó–ò:\n";
        $text .= "‚Ä¢ Telegram: @YourSupportBot\n";
        $text .= "‚Ä¢ Email: support@yourdomain.com\n";
        $text .= "‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7\n\n";
        $text .= "‚ùó –í–ê–ñ–ù–û:\n";
        $text .= "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram –ù–ï —Å–º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å –ø–æ–∫—É–ø–∫–∞–º–∏ —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞\n";
        $text .= "‚Ä¢ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º —Ä–µ—à–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É\n";
        $text .= "‚Ä¢ –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –∏–ª–∏ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n\n";
        $text .= "‚è∞ –í–†–ï–ú–Ø –û–¢–í–ï–¢–ê:\n";
        $text .= "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã: –¥–æ 2 —á–∞—Å–æ–≤\n";
        $text .= "‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º: –¥–æ 24 —á–∞—Å–æ–≤\n";
        $text .= "‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤: –¥–æ 48 —á–∞—Å–æ–≤\n\n";
        $text .= "üîÑ –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start";

        Http::post($this->botUrl . '/sendMessage', [
            'chat_id' => $chatId,
            'text' => $text,
        ]);
    }
}
