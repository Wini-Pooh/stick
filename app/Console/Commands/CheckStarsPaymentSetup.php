<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class CheckStarsPaymentSetup extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'bot:check-stars-setup {--fix : –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É Telegram Stars –ø–ª–∞—Ç–µ–∂–µ–π';

    private $botToken;
    private $botUrl;
    private $webhookUrl;
    private $issues = [];
    private $checks = [];

    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üîç –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Stars –ø–ª–∞—Ç–µ–∂–µ–π');
        $this->newLine();

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        $this->call('config:clear');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
        $this->botToken = env('TELEGRAM_BOT_TOKEN', '8410914085:AAEkR3kyRw-lvb8WRP0MRQugvpEH-fkhLp4');
        $this->botUrl = "https://api.telegram.org/bot{$this->botToken}";
        $this->webhookUrl = (config('app.url') ?: env('APP_URL') ?: 'https://tg.sticap.ru') . '/api/telegram/webhook';

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        $this->checkBotToken();
        $this->checkWebhookSetup();
        $this->checkWebhookUrl();
        $this->checkRoutes();
        $this->checkControllerMethods();
        $this->checkEnvironment();
        $this->checkInvoiceExample();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        $this->showResults();

        // –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
        if ($this->option('fix') && count($this->issues) > 0) {
            $this->autoFix();
        }

        return count($this->issues) === 0 ? 0 : 1;
    }

    private function checkBotToken()
    {
        $this->info('üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...');
        
        try {
            $response = Http::timeout(10)->get($this->botUrl . '/getMe');
            $data = $response->json();
            
            if ($data['ok'] ?? false) {
                $bot = $data['result'];
                $this->addCheck('‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞', "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π: @{$bot['username']} ({$bot['first_name']})");
            } else {
                $this->addIssue('‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞', '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω');
            }
        } catch (\Exception $e) {
            $this->addIssue('‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞', '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' . $e->getMessage());
        }
    }

    private function checkWebhookSetup()
    {
        $this->info('üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook...');
        
        try {
            $response = Http::timeout(10)->get($this->botUrl . '/getWebhookInfo');
            $data = $response->json();
            
            if ($data['ok'] ?? false) {
                $webhook = $data['result'];
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
                if (empty($webhook['url'])) {
                    $this->addIssue('‚ùå Webhook URL', 'Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                } elseif ($webhook['url'] !== $this->webhookUrl) {
                    $this->addIssue('‚ö†Ô∏è Webhook URL', "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {$webhook['url']}, –æ–∂–∏–¥–∞–µ—Ç—Å—è: {$this->webhookUrl}");
                } else {
                    $this->addCheck('‚úÖ Webhook URL', $webhook['url']);
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ allowed_updates
                $allowedUpdates = $webhook['allowed_updates'] ?? [];
                $requiredUpdates = ['pre_checkout_query', 'successful_payment'];
                $missingUpdates = array_diff($requiredUpdates, $allowedUpdates);
                
                if (empty($missingUpdates)) {
                    $this->addCheck('‚úÖ Allowed Updates', '–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∏–ø—ã –≤–∫–ª—é—á–µ–Ω—ã: ' . implode(', ', $allowedUpdates));
                } else {
                    $this->addIssue('‚ùå Allowed Updates', '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∏–ø—ã: ' . implode(', ', $missingUpdates));
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ pending updates
                if ($webhook['pending_update_count'] > 10) {
                    $this->addIssue('‚ö†Ô∏è Pending Updates', "–ù–∞–∫–æ–ø–∏–ª–æ—Å—å {$webhook['pending_update_count']} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π");
                } else {
                    $this->addCheck('‚úÖ Pending Updates', $webhook['pending_update_count']);
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
                if (!empty($webhook['last_error_date'])) {
                    $errorDate = date('Y-m-d H:i:s', $webhook['last_error_date']);
                    $this->addIssue('‚ùå Webhook Errors', "–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {$errorDate} - {$webhook['last_error_message']}");
                } else {
                    $this->addCheck('‚úÖ Webhook Errors', '–û—à–∏–±–æ–∫ –Ω–µ—Ç');
                }
                
            } else {
                $this->addIssue('‚ùå Webhook Info', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');
            }
        } catch (\Exception $e) {
            $this->addIssue('‚ùå Webhook Info', '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' . $e->getMessage());
        }
    }

    private function checkWebhookUrl()
    {
        $this->info('üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook URL...');
        
        try {
            $response = Http::timeout(10)->post($this->webhookUrl, ['test' => true]);
            
            if ($response->successful()) {
                $body = $response->json();
                if (isset($body['ok']) && $body['ok'] === true) {
                    $this->addCheck('‚úÖ Webhook –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', 'Endpoint –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
                } else {
                    $this->addIssue('‚ö†Ô∏è Webhook –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', 'Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç');
                }
            } else {
                $this->addIssue('‚ùå Webhook –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', "HTTP {$response->status()}: Endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            }
        } catch (\Exception $e) {
            $this->addIssue('‚ùå Webhook –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å', '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' . $e->getMessage());
        }
    }

    private function checkRoutes()
    {
        $this->info('üõ§Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤...');
        
        $routes = [
            '/api/telegram/webhook' => 'api.telegram.webhook',
            '/telegram/set-webhook-stars' => 'telegram.set-webhook-stars',
            '/telegram/webhook-info' => 'telegram.webhook-info',
            '/bot-admin' => 'bot.admin'
        ];
        
        foreach ($routes as $url => $routeName) {
            try {
                $fullUrl = (config('app.url') ?: env('APP_URL')) . $url;
                $response = Http::timeout(5)->get($fullUrl);
                
                if ($response->successful() || $response->status() === 405) { // 405 = Method Not Allowed (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è POST –º–∞—Ä—à—Ä—É—Ç–æ–≤)
                    $this->addCheck("‚úÖ Route {$url}", '–î–æ—Å—Ç—É–ø–µ–Ω');
                } else {
                    $this->addIssue("‚ùå Route {$url}", "HTTP {$response->status()}");
                }
            } catch (\Exception $e) {
                $this->addIssue("‚ùå Route {$url}", '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ' . $e->getMessage());
            }
        }
    }

    private function checkControllerMethods()
    {
        $this->info('üéõÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞...');
        
        $controllerFile = app_path('Http/Controllers/TelegramBotController.php');
        
        if (!file_exists($controllerFile)) {
            $this->addIssue('‚ùå Controller', 'TelegramBotController.php –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        $content = file_get_contents($controllerFile);
        
        $requiredMethods = [
            'handlePreCheckoutQuery' => '–û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout_query',
            'handleSuccessfulPayment' => '–û–±—Ä–∞–±–æ—Ç–∫–∞ successful_payment',
            'setWebhookWithStars' => '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è Stars'
        ];
        
        foreach ($requiredMethods as $method => $description) {
            if (strpos($content, "function {$method}") !== false || 
                strpos($content, "function {$method}(") !== false ||
                preg_match("/private\s+function\s+{$method}\s*\(/", $content) ||
                preg_match("/protected\s+function\s+{$method}\s*\(/", $content)) {
                $this->addCheck("‚úÖ Method {$method}", $description);
            } else {
                $this->addIssue("‚ùå Method {$method}", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {$description}");
            }
        }
    }

    private function checkEnvironment()
    {
        $this->info('‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
        
        // –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        $envPath = base_path('.env');
        $envVars = [];
        
        if (file_exists($envPath)) {
            $envContent = file_get_contents($envPath);
            $lines = explode("\n", $envContent);
            foreach ($lines as $line) {
                if (strpos($line, '=') !== false && !str_starts_with(trim($line), '#')) {
                    [$key, $value] = explode('=', $line, 2);
                    $envVars[trim($key)] = trim($value);
                }
            }
        }
        
        $envChecks = [
            'TELEGRAM_BOT_TOKEN' => $envVars['TELEGRAM_BOT_TOKEN'] ?? null,
            'APP_URL' => $envVars['APP_URL'] ?? null,
            'APP_ENV' => $envVars['APP_ENV'] ?? null,
        ];
        
        foreach ($envChecks as $key => $value) {
            if (empty($value)) {
                $this->addIssue("‚ùå ENV {$key}", '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
            } else {
                $this->addCheck("‚úÖ ENV {$key}", $value);
            }
        }
    }

    private function checkInvoiceExample()
    {
        $this->info('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–Ω–≤–æ–π—Å–∞...');
        
        $exampleInvoice = [
            'chat_id' => 123456789,
            'title' => '–¢–µ—Å—Ç–æ–≤—ã–π –±–∏–ª–µ—Ç',
            'description' => '–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞',
            'payload' => json_encode(['test' => true]),
            'provider_token' => '', // –ü—É—Å—Ç–æ–π –¥–ª—è Stars
            'currency' => 'XTR', // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è Stars
            'prices' => [['label' => '–ë–∏–ª–µ—Ç', 'amount' => 1]]
        ];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—É
        if ($exampleInvoice['currency'] === 'XTR') {
            $this->addCheck('‚úÖ Currency', 'XTR (Telegram Stars)');
        } else {
            $this->addIssue('‚ùå Currency', '–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å XTR –¥–ª—è Stars –ø–ª–∞—Ç–µ–∂–µ–π');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º provider_token
        if (empty($exampleInvoice['provider_token'])) {
            $this->addCheck('‚úÖ Provider Token', '–ü—É—Å—Ç–æ–π (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è Stars)');
        } else {
            $this->addIssue('‚ùå Provider Token', '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è Stars –ø–ª–∞—Ç–µ–∂–µ–π');
        }
    }

    private function addCheck($title, $message)
    {
        $this->checks[] = ['title' => $title, 'message' => $message];
    }

    private function addIssue($title, $message)
    {
        $this->issues[] = ['title' => $title, 'message' => $message];
    }

    private function showResults()
    {
        $this->newLine();
        $this->info('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:');
        $this->newLine();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (count($this->checks) > 0) {
            $this->comment('üü¢ –£–°–ü–ï–®–ù–´–ï –ü–†–û–í–ï–†–ö–ò:');
            foreach ($this->checks as $check) {
                $this->line("  {$check['title']}: {$check['message']}");
            }
            $this->newLine();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        if (count($this->issues) > 0) {
            $this->error('üî¥ –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
            foreach ($this->issues as $issue) {
                $this->line("  {$issue['title']}: {$issue['message']}");
            }
            $this->newLine();
            
            $this->comment('üí° –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:');
            $this->line('  php artisan bot:check-stars-setup --fix');
        } else {
            $this->info('üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! Stars –ø–ª–∞—Ç–µ–∂–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
        }
        
        $this->newLine();
        $this->info("‚úÖ –£—Å–ø–µ—à–Ω–æ: " . count($this->checks));
        $this->error("‚ùå –ü—Ä–æ–±–ª–µ–º: " . count($this->issues));
    }

    private function autoFix()
    {
        $this->newLine();
        $this->info('üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:');
        
        $hasWebhookIssues = false;
        $hasUrlIssue = false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
        foreach ($this->issues as $issue) {
            if (strpos($issue['title'], 'Webhook URL') !== false || 
                strpos($issue['title'], 'Allowed Updates') !== false) {
                $hasWebhookIssues = true;
            }
            if (strpos($issue['title'], 'Webhook –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å') !== false && 
                strpos($issue['description'], '419') !== false) {
                $hasUrlIssue = true;
            }
        }
        
        if ($hasWebhookIssues) {
            $this->line('  üì° –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook...');
            $this->call('bot:fix-webhook-stars', ['--delete' => true]);
        }
        
        if ($hasUrlIssue) {
            $this->line('  üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–æ—É—Ç–æ–≤...');
            $this->warn('  ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å CSRF –∑–∞—â–∏—Ç–æ–π –¥–ª—è webhook.');
            $this->warn('  ‚ö†Ô∏è Webhook –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API —Ä–æ—É—Ç—ã –≤–º–µ—Å—Ç–æ WEB —Ä–æ—É—Ç–æ–≤.');
            $this->warn('  ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ routes/api.php –µ—Å—Ç—å:');
            $this->line('     Route::post(\'/telegram/webhook\', [TelegramBotController::class, \'webhook\']);');
        }
        
        $this->comment('‚úÖ –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.');
    }
}
