<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
use App\Models\TelegramUser;

class ManageStars extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'stars:manage 
                           {action : –î–µ–π—Å—Ç–≤–∏–µ: gift, refund, balance}
                           {user_id : Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è}
                           {amount? : –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ (–¥–ª—è gift –∏ refund)}
                           {--reason= : –ü—Ä–∏—á–∏–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram Stars: –ø–æ–¥–∞—Ä–∏—Ç—å, –≤–µ—Ä–Ω—É—Ç—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å';

    private $botToken;
    private $botUrl;

    public function __construct()
    {
        parent::__construct();
        $this->botToken = env('TELEGRAM_BOT_TOKEN', '8410914085:AAEkR3kyRw-lvb8WRP0MRQugvpEH-fkhLp4');
        $this->botUrl = "https://api.telegram.org/bot{$this->botToken}";
    }

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $action = $this->argument('action');
        $userId = $this->argument('user_id');
        $amount = $this->argument('amount');
        $reason = $this->option('reason') ?: '–û–ø–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ SSH –∫–æ–º–∞–Ω–¥—É';

        $this->info("‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram Stars");
        $this->newLine();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $telegramUser = TelegramUser::where('telegram_id', $userId)->first();
        if (!$telegramUser) {
            $this->warn("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {$userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
            if (!$this->confirm('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é?')) {
                return 1;
            }
        } else {
            $this->line("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {$telegramUser->first_name} {$telegramUser->last_name} (@{$telegramUser->username})");
        }

        switch ($action) {
            case 'gift':
                return $this->giftStars($userId, $amount, $reason);
            
            case 'refund':
                return $this->refundStars($userId, $amount, $reason);
            
            case 'balance':
                return $this->checkBalance($userId);
            
            default:
                $this->error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {$action}");
                $this->line("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: gift, refund, balance");
                return 1;
        }
    }

    /**
     * –ü–æ–¥–∞—Ä–∏—Ç—å –∑–≤–µ–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    private function giftStars($userId, $amount, $reason)
    {
        if (!$amount || $amount <= 0) {
            $this->error("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞");
            return 1;
        }

        $this->info("üéÅ –ü–æ–¥–∞—Ä–æ–∫ {$amount} –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {$userId}...");

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑ Telegram Bot API
            $response = Http::post("{$this->botUrl}/sendGift", [
                'user_id' => $userId,
                'gift_id' => 'star_gift_1', // ID –ø–æ–¥–∞—Ä–∫–∞ –∑–≤–µ–∑–¥
                'text' => $reason,
            ]);

            if ($response->successful()) {
                $data = $response->json();
                if ($data['ok']) {
                    $this->info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞—Ä–µ–Ω–æ {$amount} –∑–≤–µ–∑–¥!");
                    $this->line("üìÑ –ü—Ä–∏—á–∏–Ω–∞: {$reason}");
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                    Log::info("Stars gifted via SSH", [
                        'user_id' => $userId,
                        'amount' => $amount,
                        'reason' => $reason,
                        'response' => $data
                    ]);

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    $this->sendNotification($userId, "üéÅ –í–∞–º –ø–æ–¥–∞—Ä–µ–Ω–æ {$amount} ‚≠ê!\n\n–ü—Ä–∏—á–∏–Ω–∞: {$reason}");
                    
                    return 0;
                } else {
                    $this->error("‚ùå –û—à–∏–±–∫–∞ API: " . ($data['description'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                    return 1;
                }
            } else {
                $this->error("‚ùå HTTP –æ—à–∏–±–∫–∞: " . $response->status());
                return 1;
            }

        } catch (\Exception $e) {
            $this->error("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage());
            $this->comment("üí° –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...");
            
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–º–µ–Ω—É –ø–ª–∞—Ç–µ–∂–∞
            return $this->giftStarsAlternative($userId, $amount, $reason);
        }
    }

    /**
     * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–∞—Ä–∫–∞ –∑–≤–µ–∑–¥
     */
    private function giftStarsAlternative($userId, $amount, $reason)
    {
        $this->info("üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–∞—Ä–∫–∞ –∑–≤–µ–∑–¥...");

        try {
            // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—á–µ—Ç-–ø–æ–¥–∞—Ä–æ–∫
            $response = Http::post("{$this->botUrl}/sendInvoice", [
                'chat_id' => $userId,
                'title' => "üéÅ –ü–æ–¥–∞—Ä–æ–∫ –∑–≤–µ–∑–¥",
                'description' => $reason,
                'payload' => json_encode([
                    'type' => 'gift',
                    'amount' => $amount,
                    'reason' => $reason,
                    'timestamp' => time()
                ]),
                'currency' => 'XTR',
                'prices' => [
                    ['label' => '–ü–æ–¥–∞—Ä–æ–∫ –∑–≤–µ–∑–¥', 'amount' => 0] // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫
                ],
                'provider_token' => '', // –ü—É—Å—Ç–æ–π –¥–ª—è Telegram Stars
                'reply_markup' => json_encode([
                    'inline_keyboard' => [[
                        ['text' => 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫', 'pay' => true]
                    ]]
                ])
            ]);

            if ($response->successful()) {
                $data = $response->json();
                if ($data['ok']) {
                    $this->info("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å—á–µ—Ç!");
                    $this->comment("üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram");
                    return 0;
                }
            }

            throw new \Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å—á–µ—Ç");

        } catch (\Exception $e) {
            $this->error("‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –Ω–µ —É–¥–∞–ª—Å—è: " . $e->getMessage());
            
            // –¢—Ä–µ—Ç–∏–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∏—Å–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            return $this->creditStarsToDatabase($userId, $amount, $reason);
        }
    }

    /**
     * –ù–∞—á–∏—Å–ª—è–µ–º –∑–≤–µ–∑–¥—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
     */
    private function creditStarsToDatabase($userId, $amount, $reason)
    {
        $this->info("üíæ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");

        try {
            $telegramUser = TelegramUser::where('telegram_id', $userId)->first();
            
            if (!$telegramUser) {
                $this->error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
                return 1;
            }

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–µ –ø–æ–ª–µ)
            if ($telegramUser->hasAttribute('stars_balance')) {
                $telegramUser->stars_balance += $amount;
                $telegramUser->save();
            }

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            DB::table('star_transactions')->insert([
                'telegram_user_id' => $telegramUser->id,
                'type' => 'gift',
                'amount' => $amount,
                'reason' => $reason,
                'created_at' => now(),
                'updated_at' => now()
            ]);

            $this->info("‚úÖ –ó–≤–µ–∑–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!");
            $this->sendNotification($userId, "üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {$amount} ‚≠ê!\n\n–ü—Ä–∏—á–∏–Ω–∞: {$reason}");
            
            return 0;

        } catch (\Exception $e) {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: " . $e->getMessage());
            return 1;
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—Ç–∏—Ç—å –∑–≤–µ–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    private function refundStars($userId, $amount, $reason)
    {
        if (!$amount || $amount <= 0) {
            $this->error("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞");
            return 1;
        }

        $this->info("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç {$amount} –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {$userId}...");

        try {
            // –í–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ Telegram Bot API
            $response = Http::post("{$this->botUrl}/refundStarPayment", [
                'user_id' => $userId,
                'telegram_payment_charge_id' => 'manual_refund_' . time(),
                'amount' => $amount
            ]);

            if ($response->successful()) {
                $data = $response->json();
                if ($data['ok']) {
                    $this->info("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {$amount} –∑–≤–µ–∑–¥!");
                    $this->line("üìÑ –ü—Ä–∏—á–∏–Ω–∞: {$reason}");
                    
                    Log::info("Stars refunded via SSH", [
                        'user_id' => $userId,
                        'amount' => $amount,
                        'reason' => $reason
                    ]);

                    $this->sendNotification($userId, "‚Ü©Ô∏è –í–∞–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {$amount} ‚≠ê!\n\n–ü—Ä–∏—á–∏–Ω–∞: {$reason}");
                    
                    return 0;
                }
            }

            throw new \Exception("API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä—è–º–æ–π –≤–æ–∑–≤—Ä–∞—Ç");

        } catch (\Exception $e) {
            $this->comment("üí° –ü—Ä—è–º–æ–π –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...");
            return $this->giftStarsAlternative($userId, $amount, "–í–æ–∑–≤—Ä–∞—Ç: " . $reason);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private function checkBalance($userId)
    {
        $this->info("üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$userId}...");

        try {
            $telegramUser = TelegramUser::where('telegram_id', $userId)->first();
            
            if (!$telegramUser) {
                $this->warn("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
                return 1;
            }

            $this->line("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {$telegramUser->first_name} {$telegramUser->last_name}");
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥
            if (isset($telegramUser->stars_balance)) {
                $this->line("‚≠ê –ë–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥: {$telegramUser->stars_balance}");
            } else {
                $this->line("‚≠ê –ë–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥: 0 (–ø–æ–ª–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)");
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            $transactions = DB::table('star_transactions')
                ->where('telegram_user_id', $telegramUser->id)
                ->orderBy('created_at', 'desc')
                ->limit(10)
                ->get();

            if ($transactions->count() > 0) {
                $this->line("\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:");
                $this->table(
                    ['–î–∞—Ç–∞', '–¢–∏–ø', '–°—É–º–º–∞', '–ü—Ä–∏—á–∏–Ω–∞'],
                    $transactions->map(function ($t) {
                        return [
                            $t->created_at,
                            $t->type,
                            $t->amount . ' ‚≠ê',
                            $t->reason
                        ];
                    })->toArray()
                );
            }

            return 0;

        } catch (\Exception $e) {
            $this->error("‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage());
            return 1;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    private function sendNotification($userId, $message)
    {
        try {
            Http::post("{$this->botUrl}/sendMessage", [
                'chat_id' => $userId,
                'text' => $message,
                'parse_mode' => 'HTML'
            ]);
        } catch (\Exception $e) {
            $this->comment("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: " . $e->getMessage());
        }
    }
}
