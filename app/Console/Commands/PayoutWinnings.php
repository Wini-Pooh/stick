<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use App\Models\TelegramUser;
use App\Models\StarTransaction;

class PayoutWinnings extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'lottery:payout-winnings 
                           {user_id : Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è}
                           {amount : –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã}
                           {--reason= : –ü—Ä–∏—á–∏–Ω–∞ –≤—ã–ø–ª–∞—Ç—ã}
                           {--ticket-id= : ID –±–∏–ª–µ—Ç–∞ –ª–æ—Ç–µ—Ä–µ–∏}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–í—ã–ø–ª–∞—Ç–∞ –≤—ã–∏–≥—Ä—ã—à–∞ –≤ Telegram Stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é';

    private $botToken;
    private $botUrl;

    public function __construct()
    {
        parent::__construct();
        $this->botToken = env('TELEGRAM_BOT_TOKEN', '8410914085:AAEkR3kyRw-lvb8WRP0MRQugvpEH-fkhLp4');
        $this->botUrl = "https://api.telegram.org/bot{$this->botToken}";
    }

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $userId = $this->argument('user_id');
        $amount = (int) $this->argument('amount');
        $reason = $this->option('reason') ?: '–í—ã–∏–≥—Ä—ã—à –≤ –ª–æ—Ç–µ—Ä–µ–µ';
        $ticketId = $this->option('ticket-id');

        $this->info('üé∞ –í—ã–ø–ª–∞—Ç–∞ –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –ª–æ—Ç–µ—Ä–µ–µ');
        $this->newLine();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $telegramUser = TelegramUser::where('telegram_id', $userId)->first();
        if (!$telegramUser) {
            $this->error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {$userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
            return 1;
        }

        $this->line("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {$telegramUser->first_name} {$telegramUser->last_name} (@{$telegramUser->username})");
        $this->line("üí∞ –°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã: {$amount} ‚≠ê");
        $this->line("üìù –ü—Ä–∏—á–∏–Ω–∞: {$reason}");
        $this->newLine();

        if (!$this->confirm('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É?')) {
            $this->info('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
            return 0;
        }

        return $this->processWinningPayout($telegramUser, $amount, $reason, $ticketId);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–ª–∞—Ç—ã –≤—ã–∏–≥—Ä—ã—à–∞
     */
    private function processWinningPayout(TelegramUser $user, int $amount, string $reason, ?string $ticketId): int
    {
        try {
            // –ú–µ—Ç–æ–¥ 1: –ü–æ–ø—ã—Ç–∫–∞ refundStarPayment (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è)
            if ($ticketId && $this->tryRefundMethod($user, $amount, $ticketId)) {
                return 0;
            }

            // –ú–µ—Ç–æ–¥ 2: –°–æ–∑–¥–∞–Ω–∏–µ "–æ–±—Ä–∞—Ç–Ω–æ–≥–æ" —Å—á–µ—Ç–∞ (–≤—ã–ø–ª–∞—Ç–∞)
            if ($this->tryReverseBillMethod($user, $amount, $reason)) {
                return 0;
            }

            // –ú–µ—Ç–æ–¥ 3: –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            return $this->creditToDatabaseOnly($user, $amount, $reason, $ticketId);

        } catch (\Exception $e) {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–µ: " . $e->getMessage());
            Log::error('Lottery payout error', [
                'user_id' => $user->telegram_id,
                'amount' => $amount,
                'error' => $e->getMessage()
            ]);
            return 1;
        }
    }

    /**
     * –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å refundStarPayment –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    private function tryRefundMethod(TelegramUser $user, int $amount, string $ticketId): bool
    {
        try {
            // –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞
            $purchaseTransaction = StarTransaction::where('telegram_user_id', $user->id)
                ->where('type', 'lottery_purchase')
                ->where('metadata->ticket_id', $ticketId)
                ->whereNotNull('transaction_id')
                ->first();

            if (!$purchaseTransaction || !$purchaseTransaction->transaction_id) {
                $this->comment('üí° –†–µ–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥...');
                return false;
            }

            $this->info('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram API...');

            $response = Http::post("{$this->botUrl}/refundStarPayment", [
                'user_id' => $user->telegram_id,
                'telegram_payment_charge_id' => $purchaseTransaction->transaction_id,
            ]);

            if ($response->successful()) {
                $data = $response->json();
                if ($data['ok']) {
                    $this->info('‚úÖ –í—ã–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ refundStarPayment —É—Å–ø–µ—à–Ω–∞!');
                    
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    $this->createWinningTransaction($user, $amount, 'telegram_refund', $purchaseTransaction->transaction_id);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    $this->sendWinningNotification($user, $amount, '–í–∞—à –≤—ã–∏–≥—Ä—ã—à –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç Telegram!');
                    
                    return true;
                }
            }

            $this->comment('üí° refundStarPayment –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±...');
            return false;

        } catch (\Exception $e) {
            $this->comment('üí° refundStarPayment –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ' . $e->getMessage());
            return false;
        }
    }

    /**
     * –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è "–æ–±—Ä–∞—Ç–Ω–æ–≥–æ" —Å—á–µ—Ç–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã
     */
    private function tryReverseBillMethod(TelegramUser $user, int $amount, string $reason): bool
    {
        try {
            $this->info('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã...');

            // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—á–µ—Ç –Ω–∞ 0 –∑–≤–µ–∑–¥ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –≤—ã–∏–≥—Ä—ã—à–∞
            $response = Http::post("{$this->botUrl}/sendInvoice", [
                'chat_id' => $user->telegram_id,
                'title' => 'üéâ –í—ã–∏–≥—Ä—ã—à –≤ –ª–æ—Ç–µ—Ä–µ–µ!',
                'description' => "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {$amount} ‚≠ê –≤ –Ω–∞—à–µ–π –ª–æ—Ç–µ—Ä–µ–µ!\n\n{$reason}",
                'payload' => json_encode([
                    'type' => 'lottery_winning',
                    'amount' => $amount,
                    'user_id' => $user->telegram_id,
                    'timestamp' => time()
                ]),
                'currency' => 'XTR',
                'prices' => [
                    ['label' => '–í–∞—à –≤—ã–∏–≥—Ä—ã—à', 'amount' => $amount]
                ],
                'provider_token' => '', // –ü—É—Å—Ç–æ–π –¥–ª—è Telegram Stars
                'reply_markup' => json_encode([
                    'inline_keyboard' => [[
                        ['text' => 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à', 'callback_data' => 'claim_winning_' . $amount]
                    ]]
                ])
            ]);

            if ($response->successful()) {
                $data = $response->json();
                if ($data['ok']) {
                    $this->info('‚úÖ –°—á–µ—Ç-–≤—ã–∏–≥—Ä—ã—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!');
                    
                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ pending
                    $this->createWinningTransaction($user, $amount, 'telegram_invoice_sent', 'invoice_' . $data['result']['message_id']);
                    
                    $this->comment('üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram');
                    $this->comment('üí° –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
                    
                    return true;
                }
            }

            return false;

        } catch (\Exception $e) {
            $this->comment('üí° –û–±—Ä–∞—Ç–Ω—ã–π —Å—á–µ—Ç –Ω–µ —É–¥–∞–ª—Å—è: ' . $e->getMessage());
            return false;
        }
    }

    /**
     * –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     */
    private function creditToDatabaseOnly(TelegramUser $user, int $amount, string $reason, ?string $ticketId): int
    {
        $this->info('üíæ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');

        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $user->increment('stars_balance', $amount);

            // –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            $this->createWinningTransaction($user, $amount, 'database_credit', $ticketId);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ
            $this->sendWinningNotification($user, $amount, '–í—ã–∏–≥—Ä—ã—à –∑–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å –≤ –±–æ—Ç–µ!');

            $this->info('‚úÖ –í—ã–∏–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω!');
            $this->line("üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {$user->fresh()->stars_balance} ‚≠ê");

            return 0;

        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ' . $e->getMessage());
            return 1;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    private function createWinningTransaction(TelegramUser $user, int $amount, string $method, ?string $transactionId): void
    {
        StarTransaction::create([
            'telegram_user_id' => $user->id,
            'type' => 'lottery_win',
            'amount' => $amount,
            'reason' => '–í—ã–∏–≥—Ä—ã—à –≤ –ª–æ—Ç–µ—Ä–µ–µ',
            'transaction_id' => $transactionId,
            'metadata' => [
                'payout_method' => $method,
                'processed_at' => now()->toISOString(),
                'user_telegram_id' => $user->telegram_id
            ]
        ]);

        Log::info('Lottery winning credited', [
            'user_id' => $user->telegram_id,
            'amount' => $amount,
            'method' => $method,
            'transaction_id' => $transactionId
        ]);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∏–≥—Ä—ã—à–µ
     */
    private function sendWinningNotification(TelegramUser $user, int $amount, string $additionalInfo = ''): void
    {
        $text = "üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú –° –í–´–ò–ì–†–´–®–ï–ú! üéâ\n\n";
        $text .= "üí∞ –í–∞—à –≤—ã–∏–≥—Ä—ã—à: {$amount} ‚≠ê\n";
        $text .= "üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {$user->first_name}\n\n";
        
        if ($additionalInfo) {
            $text .= "‚ÑπÔ∏è {$additionalInfo}\n\n";
        }
        
        $text .= "üé∞ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ª–æ—Ç–µ—Ä–µ–µ!\n";
        $text .= "üéÆ –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start";

        $keyboard = [
            'inline_keyboard' => [
                [
                    ['text' => 'üé∞ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞', 'callback_data' => 'play_lotto']
                ],
                [
                    ['text' => 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', 'callback_data' => 'check_balance'],
                    ['text' => 'üìä –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä', 'callback_data' => 'my_results']
                ]
            ]
        ];

        try {
            Http::post("{$this->botUrl}/sendMessage", [
                'chat_id' => $user->telegram_id,
                'text' => $text,
                'reply_markup' => json_encode($keyboard),
                'parse_mode' => 'HTML'
            ]);
        } catch (\Exception $e) {
            $this->comment("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: " . $e->getMessage());
        }
    }
}
