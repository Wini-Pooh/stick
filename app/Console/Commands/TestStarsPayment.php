<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class TestStarsPayment extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'bot:test-stars-payment {user_id? : ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∞}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É Stars –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏';

    private $botToken;
    private $botUrl;

    public function __construct()
    {
        parent::__construct();
        $this->botToken = env('TELEGRAM_BOT_TOKEN', '8410914085:AAEkR3kyRw-lvb8WRP0MRQugvpEH-fkhLp4');
        $this->botUrl = "https://api.telegram.org/bot{$this->botToken}";
    }

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Stars –ø–ª–∞—Ç–µ–∂–∞');
        $this->newLine();

        $userId = $this->argument('user_id') ?: 1107317588; // –í–∞—à ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å
        $this->sendTestInvoice($userId);
        
        // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $this->showInstructions();
        
        // –û–∂–∏–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $this->waitForPayment();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
        $this->checkLogs();
    }

    private function sendTestInvoice($userId)
    {
        $this->info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {$userId}...");
        
        $invoice = [
            'chat_id' => $userId,
            'title' => 'üß™ –¢–µ—Å—Ç–æ–≤—ã–π Stars –ø–ª–∞—Ç–µ–∂',
            'description' => '–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Stars –ø–ª–∞—Ç–µ–∂–µ–π',
            'payload' => json_encode([
                'test' => true,
                'timestamp' => now()->timestamp,
                'command' => 'bot:test-stars-payment'
            ]),
            'provider_token' => '', // –ü—É—Å—Ç–æ–π –¥–ª—è Stars
            'currency' => 'XTR',
            'prices' => [
                ['label' => '–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞', 'amount' => 1]
            ]
        ];
        
        try {
            $response = Http::timeout(10)->post($this->botUrl . '/sendInvoice', $invoice);
            $data = $response->json();
            
            if ($data['ok'] ?? false) {
                $this->comment('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                $this->line("üìã Message ID: {$data['result']['message_id']}");
                
                Log::info('üß™ Test invoice sent via console command', [
                    'user_id' => $userId,
                    'message_id' => $data['result']['message_id'],
                    'currency' => 'XTR',
                    'amount' => 1
                ]);
            } else {
                $this->error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞: ' . ($data['description'] ?? 'Unknown error'));
                return false;
            }
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' . $e->getMessage());
            return false;
        }
        
        return true;
    }

    private function showInstructions()
    {
        $this->newLine();
        $this->comment('üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
        $this->line('1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–æ–π—Å–æ–º');
        $this->line('2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–ª–∞—Ç–∏—Ç—å ‚≠êÔ∏è1"');
        $this->line('3. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–≤–µ–∑–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å)');
        $this->line('4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤');
        $this->newLine();
        
        $this->info('üîç –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –ª–æ–≥–∞—Ö:');
        $this->line('   [INFO] üåü Pre-checkout query received');
        $this->line('   [INFO] ‚úÖ Pre-checkout query approved');
        $this->line('   [INFO] üåü Successful payment received');
        $this->line('   [INFO] ‚úÖ Payment confirmed');
        $this->newLine();
    }

    private function waitForPayment()
    {
        $this->comment('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞...');
        $this->line('–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã');
        
        // –ñ–¥–µ–º –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $handle = fopen("php://stdin", "r");
        fgets($handle);
        fclose($handle);
    }

    private function checkLogs()
    {
        $this->info('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç...');
        
        $logFile = storage_path('logs/laravel.log');
        
        if (!file_exists($logFile)) {
            $this->error('‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: ' . $logFile);
            return;
        }
        
        $logs = file($logFile, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
        $recentLogs = [];
        $cutoffTime = now()->subMinutes(5);
        
        foreach (array_reverse($logs) as $line) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –ª–æ–≥–∞
            if (preg_match('/\[(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})\]/', $line, $matches)) {
                $logTime = \Carbon\Carbon::createFromFormat('Y-m-d H:i:s', $matches[1]);
                if ($logTime->lt($cutoffTime)) {
                    break; // –°–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
                }
            }
            
            // –ò—â–µ–º –ª–æ–≥–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
            if (strpos($line, 'Pre-checkout') !== false || 
                strpos($line, 'Successful payment') !== false ||
                strpos($line, 'Invoice') !== false ||
                strpos($line, 'payment') !== false ||
                strpos($line, 'webhook') !== false ||
                strpos($line, 'üåü') !== false ||
                strpos($line, 'üß™') !== false) {
                $recentLogs[] = $line;
            }
        }
        
        if (empty($recentLogs)) {
            $this->error('‚ùå –õ–æ–≥–∏ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç');
            $this->comment('üí° –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ webhook –Ω–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Telegram');
            $this->line('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            $this->line('   - Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è pre_checkout_query –∏ successful_payment');
            $this->line('   - –ü—Ä–æ–±–ª–µ–º—ã —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º');
            $this->line('   - Webhook URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è Telegram');
        } else {
            $this->comment('üìã –ù–ê–ô–î–ï–ù–ù–´–ï –õ–û–ì–ò –ü–õ–ê–¢–ï–ñ–ï–ô:');
            foreach (array_reverse($recentLogs) as $log) {
                $this->line('  ' . $log);
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏
            $this->analyzeLogs($recentLogs);
        }
    }

    private function analyzeLogs($logs)
    {
        $this->newLine();
        $this->info('üîç –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í:');
        
        $foundInvoice = false;
        $foundPreCheckout = false;
        $foundSuccessfulPayment = false;
        
        foreach ($logs as $log) {
            if (strpos($log, 'Invoice sent successfully') !== false) {
                $foundInvoice = true;
            }
            if (strpos($log, 'Pre-checkout query received') !== false) {
                $foundPreCheckout = true;
            }
            if (strpos($log, 'Successful payment received') !== false) {
                $foundSuccessfulPayment = true;
            }
        }
        
        $this->line("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞: " . ($foundInvoice ? '‚úÖ –ù–∞–π–¥–µ–Ω–∞' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'));
        $this->line("üîç Pre-checkout query: " . ($foundPreCheckout ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'));
        $this->line("üí∞ Successful payment: " . ($foundSuccessfulPayment ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'));
        
        if ($foundInvoice && $foundPreCheckout && $foundSuccessfulPayment) {
            $this->newLine();
            $this->info('üéâ –û–¢–õ–ò–ß–ù–û! Stars –ø–ª–∞—Ç–µ–∂–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
        } elseif ($foundInvoice && !$foundPreCheckout) {
            $this->newLine();
            $this->error('‚ùå –ü–†–û–ë–õ–ï–ú–ê: Pre-checkout query –Ω–µ –ø–æ–ª—É—á–µ–Ω');
            $this->comment('üí° Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ pre_checkout_query');
            $this->line('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: php artisan bot:fix-webhook-stars --delete');
        } elseif ($foundPreCheckout && !$foundSuccessfulPayment) {
            $this->newLine();
            $this->error('‚ùå –ü–†–û–ë–õ–ï–ú–ê: Successful payment –Ω–µ –ø–æ–ª—É—á–µ–Ω');
            $this->comment('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            $this->line('   - –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
            $this->line('   - Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è successful_payment');
        }
    }
}
