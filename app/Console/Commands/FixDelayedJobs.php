<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Artisan;

class FixDelayedJobs extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'queue:fix-delayed {--force : –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –≤ –æ—á–µ—Ä–µ–¥–∏';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏');
        $this->newLine();

        $this->checkDelayedJobs();

        if ($this->option('force')) {
            $this->forceDelayedJobs();
        }

        $this->showWorkerCommands();
    }

    private function checkDelayedJobs()
    {
        $this->info('üìä –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏...');
        
        $now = now()->timestamp;
        
        // –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (should be processed now)
        $overdueJobs = DB::table('jobs')
            ->where('available_at', '<=', $now)
            ->count();
            
        // –ë—É–¥—É—â–∏–µ –∑–∞–¥–∞—á–∏
        $futureJobs = DB::table('jobs')
            ->where('available_at', '>', $now)
            ->count();
            
        $this->comment("‚è∞ –ó–∞–¥–∞—á, –≥–æ—Ç–æ–≤—ã—Ö –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é: {$overdueJobs}");
        $this->comment("üîÆ –ó–∞–¥–∞—á –≤ –±—É–¥—É—â–µ–º: {$futureJobs}");
        
        if ($overdueJobs > 0) {
            $this->newLine();
            $this->warn("‚ö†Ô∏è –ï—Å—Ç—å {$overdueJobs} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!");
            $this->comment('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            $this->line('‚Ä¢ Worker –Ω–µ –∑–∞–ø—É—â–µ–Ω');
            $this->line('‚Ä¢ Worker –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ --sleep');
            $this->line('‚Ä¢ Worker –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å');
            $this->newLine();
            $this->comment('üîß –†–µ—à–µ–Ω–∏–µ: –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ worker —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        if ($overdueJobs > 0) {
            $this->showOverdueJobs();
        }
    }

    private function showOverdueJobs()
    {
        $this->info('üìã –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:');
        
        $jobs = DB::table('jobs')
            ->where('available_at', '<=', now()->timestamp)
            ->orderBy('available_at')
            ->limit(5)
            ->get();

        foreach ($jobs as $job) {
            $payload = json_decode($job->payload, true);
            $jobClass = $payload['displayName'] ?? 'Unknown';
            
            $scheduledTime = \Carbon\Carbon::createFromTimestamp($job->available_at)
                ->setTimezone('Europe/Moscow')
                ->format('H:i:s d.m.Y');
                
            $delay = \Carbon\Carbon::createFromTimestamp($job->available_at)
                ->diffForHumans(now(), true);
                
            $this->line("‚Ä¢ {$jobClass} - –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –≤ {$scheduledTime} MSK (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –Ω–∞ {$delay})");
        }
    }

    private function forceDelayedJobs()
    {
        $this->newLine();
        $this->info('üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...');
        
        $jobs = DB::table('jobs')
            ->where('available_at', '<=', now()->timestamp)
            ->get();
            
        if ($jobs->isEmpty()) {
            $this->comment('‚úÖ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
            return;
        }
        
        $this->comment("–ù–∞–π–¥–µ–Ω–æ {$jobs->count()} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á");
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º available_at –≤ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        $updated = DB::table('jobs')
            ->where('available_at', '<=', now()->timestamp)
            ->update(['available_at' => now()->timestamp]);
            
        $this->comment("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {$updated} –∑–∞–¥–∞—á –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");
        $this->comment('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: php8.1 artisan queue:work');
    }

    private function showWorkerCommands()
    {
        $this->newLine();
        $this->info('üîß –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ worker:');
        $this->newLine();
        
        $this->comment('–î–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):');
        $this->line('php8.1 artisan queue:work --sleep=3 --tries=3 --max-time=3600');
        $this->newLine();
        
        $this->comment('–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:');
        $this->line('php artisan queue:work --sleep=1 --tries=3');
        $this->newLine();
        
        $this->comment('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ worker (–µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –∫–æ–¥):');
        $this->line('php8.1 artisan queue:restart');
        $this->newLine();
        
        $this->info('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:');
        $this->line('‚Ä¢ --sleep=3    - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫');
        $this->line('‚Ä¢ --tries=3    - –º–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
        $this->line('‚Ä¢ --max-time   - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ worker —á–µ—Ä–µ–∑ —á–∞—Å');
        $this->line('‚Ä¢ --timeout    - —Ç–∞–π–º–∞—É—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏');
    }
}
