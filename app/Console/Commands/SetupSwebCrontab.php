<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;

class SetupSwebCrontab extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'queue:setup-sweb-crontab 
                           {--dry-run : –¢–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è}
                           {--with-monitoring : –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Crontab —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è SWEB —Ö–æ—Å—Ç–∏–Ω–≥–∞ (boost113ic/tg_sticap_ru)';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Crontab –¥–ª—è SWEB —Ö–æ—Å—Ç–∏–Ω–≥–∞');
        $this->newLine();

        $dryRun = $this->option('dry-run');
        $withMonitoring = $this->option('with-monitoring');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if (!$this->checkSwebEnvironment()) {
            return 1;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã crontab
        $crontabEntries = $this->generateSwebCrontabEntries($withMonitoring);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        $this->showCrontabEntries($crontabEntries);

        if ($dryRun) {
            $this->info('üîç –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ (--dry-run) - –∫–æ–º–∞–Ω–¥—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
            $this->showManualInstructions($crontabEntries);
            return 0;
        }

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if (!$this->confirm('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –≤ crontab?')) {
            $this->info('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
            return 0;
        }

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        $this->prepareSwebEnvironment();

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ crontab
        return $this->installSwebCrontab($crontabEntries);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è SWEB
     */
    private function checkSwebEnvironment(): bool
    {
        $this->info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è SWEB...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–µ
        $currentDir = basename(getcwd());
        if ($currentDir !== 'tg_sticap_ru') {
            $this->warn("‚ö†Ô∏è –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {$currentDir}");
            $this->comment('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–∞–ø–∫–µ tg_sticap_ru');
            
            if (!$this->confirm('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É?')) {
                return false;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º artisan
        if (!file_exists('artisan')) {
            $this->error('‚ùå –§–∞–π–ª artisan –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ');
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º PHP 8.1
        $phpCheck = shell_exec('php8.1 --version 2>/dev/null');
        if (empty($phpCheck)) {
            $this->error('‚ùå PHP 8.1 –Ω–µ –Ω–∞–π–¥–µ–Ω');
            $this->comment('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ PHP 8.1 –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ');
            return false;
        } else {
            $phpVersion = explode("\n", $phpCheck)[0];
            $this->comment("‚úÖ PHP –Ω–∞–π–¥–µ–Ω: {$phpVersion}");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º crontab
        $crontabCheck = shell_exec('which crontab 2>/dev/null');
        if (empty($crontabCheck)) {
            $this->error('‚ùå Crontab –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
            return false;
        }

        $this->comment('‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ SWEB –≥–æ—Ç–æ–≤–æ');
        return true;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ crontab –¥–ª—è SWEB
     */
    private function generateSwebCrontabEntries($withMonitoring): array
    {
        $entries = [
            'queue_worker' => [
                'schedule' => '* * * * *',
                'command' => 'cd tg_sticap_ru && php8.1 artisan queue:work --stop-when-empty --max-time=60 --sleep=3 --tries=3',
                'output' => '>> logs/queue-worker.log 2>&1',
                'description' => 'Laravel Queue Worker - –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É'
            ],
            'fix_delayed' => [
                'schedule' => '*/5 * * * *',
                'command' => 'cd tg_sticap_ru && php8.1 artisan queue:fix-delayed --force',
                'output' => '>> logs/queue-fix.log 2>&1',
                'description' => '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç'
            ]
        ];

        if ($withMonitoring) {
            $entries['queue_monitor'] = [
                'schedule' => '*/30 * * * *',
                'command' => 'cd tg_sticap_ru && php8.1 artisan queue:monitor',
                'output' => '>> logs/queue-monitor.log 2>&1',
                'description' => '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏ - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç'
            ];

            $entries['log_cleanup'] = [
                'schedule' => '0 2 * * *',
                'command' => 'find tg_sticap_ru/storage/logs/*.log -type f -mtime +7 -delete',
                'output' => '2>/dev/null',
                'description' => '–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 2:00'
            ];
        }

        return $entries;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã crontab
     */
    private function showCrontabEntries($entries): void
    {
        $this->info('üìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è crontab:');
        $this->newLine();

        foreach ($entries as $entry) {
            $this->comment("# {$entry['description']}");
            $fullCommand = "{$entry['schedule']} {$entry['command']} {$entry['output']}";
            $this->line($fullCommand);
            $this->newLine();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
     */
    private function showManualInstructions($entries): void
    {
        $this->newLine();
        $this->info('üìù –î–ª—è —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏:');
        $this->newLine();
        
        $this->comment('1. –û—Ç–∫—Ä–æ–π—Ç–µ crontab:');
        $this->line('   crontab -e');
        $this->newLine();
        
        $this->comment('2. –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏:');
        foreach ($entries as $entry) {
            $this->line("   # {$entry['description']}");
            $this->line("   {$entry['schedule']} {$entry['command']} {$entry['output']}");
        }
        $this->newLine();
        
        $this->comment('3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ (Ctrl+X, Y, Enter)');
        $this->comment('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: crontab -l');
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è SWEB
     */
    private function prepareSwebEnvironment(): void
    {
        $this->info('üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...');

        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        if (!is_dir('logs')) {
            mkdir('logs', 0755, true);
            $this->comment('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ logs/');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ artisan
        if (file_exists('artisan')) {
            chmod('artisan', 0755);
            $this->comment('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ artisan');
        }

        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ª–æ–≥ —Ñ–∞–π–ª—ã
        $logFiles = ['queue-worker.log', 'queue-fix.log', 'queue-monitor.log'];
        foreach ($logFiles as $logFile) {
            $path = "logs/{$logFile}";
            if (!file_exists($path)) {
                touch($path);
                chmod($path, 0664);
            }
        }

        $this->comment('‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ');
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ crontab –¥–ª—è SWEB
     */
    private function installSwebCrontab($entries): int
    {
        $this->info('üìù –£—Å—Ç–∞–Ω–æ–≤–∫–∞ crontab...');

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π crontab
            $currentCrontab = shell_exec('crontab -l 2>/dev/null') ?: '';
            
            // –ú–∞—Ä–∫–µ—Ä—ã –¥–ª—è –Ω–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
            $startMarker = '# SWEB Laravel Queue Worker - Auto Generated';
            $endMarker = '# End SWEB Laravel Queue Worker';
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
            $newEntries = "\n{$startMarker}\n";
            foreach ($entries as $entry) {
                $newEntries .= "# {$entry['description']}\n";
                $newEntries .= "{$entry['schedule']} {$entry['command']} {$entry['output']}\n";
            }
            $newEntries .= "{$endMarker}\n";

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
            if (strpos($currentCrontab, $startMarker) !== false) {
                $this->warn('‚ö†Ô∏è –ó–∞–ø–∏—Å–∏ SWEB Laravel Queue Worker —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
                
                if ($this->confirm('–û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏?')) {
                    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
                    $pattern = "/{$startMarker}.*?{$endMarker}\n/s";
                    $currentCrontab = preg_replace($pattern, '', $currentCrontab);
                } else {
                    $this->info('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
                    return 0;
                }
            }

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º
            $fullCrontab = trim($currentCrontab) . $newEntries;

            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            $tempFile = tempnam(sys_get_temp_dir(), 'crontab_sweb');
            file_put_contents($tempFile, $fullCrontab);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            $result = shell_exec("crontab {$tempFile} 2>&1");
            unlink($tempFile);

            if ($result === null || empty($result)) {
                $this->info('‚úÖ Crontab —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è SWEB!');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                $this->newLine();
                $this->comment('üìã –¢–µ–∫—É—â–∏–π crontab:');
                $this->line(shell_exec('crontab -l'));
                
                // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É
                $this->showMonitoringInstructions();
                
                return 0;
            } else {
                $this->error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ crontab: {$result}");
                return 1;
            }

        } catch (\Exception $e) {
            $this->error("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: " . $e->getMessage());
            return 1;
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É
     */
    private function showMonitoringInstructions(): void
    {
        $this->newLine();
        $this->info('üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:');
        $this->newLine();
        
        $this->comment('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Ä–∞–±–æ—Ç—ã:');
        $this->line('  tail -f logs/queue-worker.log');
        $this->newLine();
        
        $this->comment('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—á–µ—Ä–µ–¥–∏:');
        $this->line('  php8.1 artisan queue:monitor');
        $this->newLine();
        
        $this->comment('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:');
        $this->line('  php8.1 artisan lottery:test --quick --user-id=–í–ê–®_TELEGRAM_ID');
        $this->line('  php8.1 artisan lottery:test-winning-payout --user-id=–í–ê–®_TELEGRAM_ID --amount=5');
        $this->newLine();
        
        $this->comment('–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞:');
        $this->line('  php8.1 artisan stars:manage balance –í–ê–®_TELEGRAM_ID');
        $this->newLine();
        
        $this->comment('–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ queue worker –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        $this->line('  php8.1 artisan queue:work --stop-when-empty --max-time=10');
        $this->newLine();
        
        $this->info('üéØ –ß–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—á–Ω–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–¥–∞—á–∏!');
    }
}
