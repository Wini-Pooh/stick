<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;

class CheckCronStatus extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'queue:check-cron-status';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã cron –∑–∞–¥–∞—á –∏ –ª–æ–≥–æ–≤ –æ—á–µ—Ä–µ–¥–∏';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ cron –∑–∞–¥–∞—á –∏ –æ—á–µ—Ä–µ–¥–∏');
        $this->newLine();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
        $this->checkLogs();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        $this->checkQueueStatus();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        $this->checkLastExecution();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        $this->showInstructions();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
     */
    private function checkLogs(): void
    {
        $this->info('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤:');
        $this->newLine();

        $logFiles = [
            'logs/queue-worker.log' => 'Queue Worker',
            'logs/queue-fix.log' => 'Fix Delayed Jobs',
            'logs/queue-monitor.log' => 'Queue Monitor',
            'storage/logs/laravel.log' => 'Laravel Application'
        ];

        foreach ($logFiles as $file => $description) {
            if (file_exists($file)) {
                $size = filesize($file);
                $modified = date('Y-m-d H:i:s', filemtime($file));
                
                if ($size > 0) {
                    $this->comment("‚úÖ {$description}: {$this->formatBytes($size)}, –∏–∑–º–µ–Ω–µ–Ω {$modified}");
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è queue-worker.log
                    if ($file === 'logs/queue-worker.log') {
                        $lastLines = $this->getLastLines($file, 3);
                        if (!empty($lastLines)) {
                            $this->line('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:');
                            foreach ($lastLines as $line) {
                                $this->line('   ' . trim($line));
                            }
                        }
                    }
                } else {
                    $this->warn("‚ö†Ô∏è {$description}: —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞–Ω {$modified}");
                }
            } else {
                $this->error("‚ùå {$description}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ({$file})");
            }
        }
        $this->newLine();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
     */
    private function checkQueueStatus(): void
    {
        $this->info('‚öôÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏:');
        $this->newLine();

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏
            $pendingJobs = \Illuminate\Support\Facades\DB::table('jobs')->count();
            $failedJobs = \Illuminate\Support\Facades\DB::table('failed_jobs')->count();

            $this->comment("üìä –ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {$pendingJobs}");
            $this->comment("‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á: {$failedJobs}");

            if ($pendingJobs > 0) {
                $this->warn("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É cron.");
            }

            if ($failedJobs > 0) {
                $this->warn("‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.");
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
                $recentFailed = \Illuminate\Support\Facades\DB::table('failed_jobs')
                    ->orderBy('failed_at', 'desc')
                    ->limit(3)
                    ->get(['payload', 'exception', 'failed_at']);

                foreach ($recentFailed as $failed) {
                    $payload = json_decode($failed->payload, true);
                    $jobClass = $payload['displayName'] ?? 'Unknown Job';
                    $this->line("   - {$jobClass} ({$failed->failed_at})");
                }
            }

        } catch (\Exception $e) {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏: " . $e->getMessage());
        }

        $this->newLine();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    private function checkLastExecution(): void
    {
        $this->info('‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:');
        $this->newLine();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        $logFile = 'logs/queue-worker.log';
        if (file_exists($logFile)) {
            $lastModified = filemtime($logFile);
            $timeDiff = time() - $lastModified;

            if ($timeDiff < 120) { // –º–µ–Ω–µ–µ 2 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
                $this->comment("‚úÖ Queue worker –∞–∫—Ç–∏–≤–µ–Ω (–ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: " . $this->timeAgo($timeDiff) . ")");
            } elseif ($timeDiff < 300) { // –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
                $this->warn("‚ö†Ô∏è Queue worker –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω —É–∂–µ " . $this->timeAgo($timeDiff));
            } else {
                $this->error("‚ùå Queue worker –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–∂–µ " . $this->timeAgo($timeDiff));
                $this->comment("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ cron –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∏–Ω–≥–æ–º");
            }
        } else {
            $this->error("‚ùå –õ–æ–≥ —Ñ–∞–π–ª queue worker –Ω–µ –Ω–∞–π–¥–µ–Ω");
            $this->comment("üí° Cron –∑–∞–¥–∞—á–∏ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
        }

        $this->newLine();
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
     */
    private function showInstructions(): void
    {
        $this->info('üí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
        $this->newLine();

        $this->comment('–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ queue worker (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):');
        $this->line('  php8.1 artisan queue:work --stop-when-empty --max-time=60');
        $this->newLine();

        $this->comment('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:');
        $this->line('  tail -f logs/queue-worker.log');
        $this->newLine();

        $this->comment('–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É:');
        $this->line('  php8.1 artisan queue:test-timing --seconds=30');
        $this->newLine();

        $this->comment('–¢–µ—Å—Ç –ª–æ—Ç–µ—Ä–µ–∏:');
        $this->line('  php8.1 artisan lottery:test --quick --user-id=–í–ê–®_TELEGRAM_ID');
        $this->newLine();

        $this->comment('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å cron –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∏–Ω–≥–æ–º:');
        $this->line('  –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–¥–∞—á–∏ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º * * * * * –∏ */5 * * * *');
        $this->newLine();

        if (!$this->isCronWorking()) {
            $this->warn('‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ —á—Ç–æ cron –∑–∞–¥–∞—á–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç!');
            $this->comment('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∏–Ω–≥–æ–º SWEB');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ cron
     */
    private function isCronWorking(): bool
    {
        $logFile = 'logs/queue-worker.log';
        if (!file_exists($logFile)) {
            return false;
        }

        $lastModified = filemtime($logFile);
        $timeDiff = time() - $lastModified;

        return $timeDiff < 300; // –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞
     */
    private function getLastLines($file, $lines = 10): array
    {
        if (!file_exists($file)) {
            return [];
        }

        $content = file($file);
        return array_slice($content, -$lines);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
     */
    private function formatBytes($size): string
    {
        if ($size < 1024) return $size . ' B';
        if ($size < 1048576) return round($size / 1024, 1) . ' KB';
        return round($size / 1048576, 1) . ' MB';
    }

    /**
     * –í—Ä–µ–º—è –Ω–∞–∑–∞–¥ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
     */
    private function timeAgo($seconds): string
    {
        if ($seconds < 60) return $seconds . ' —Å–µ–∫ –Ω–∞–∑–∞–¥';
        if ($seconds < 3600) return round($seconds / 60) . ' –º–∏–Ω –Ω–∞–∑–∞–¥';
        return round($seconds / 3600) . ' —á–∞—Å –Ω–∞–∑–∞–¥';
    }
}
