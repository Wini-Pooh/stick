<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;

class ForceFixStarsSetup extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'bot:force-fix-stars {--test : –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º —Å Telegram Stars';

    private $botToken = '8410914085:AAEkR3kyRw-lvb8WRP0MRQugvpEH-fkhLp4';
    private $botUrl;

    public function __construct()
    {
        parent::__construct();
        $this->botUrl = "https://api.telegram.org/bot{$this->botToken}";
    }

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï TELEGRAM STARS');
        $this->newLine();

        // –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–µ–π
        $this->step1_ClearCaches();
        
        // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ .env
        $this->step2_FixEnvironment();
        
        // –®–∞–≥ 3: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
        $this->step3_ForceWebhook();
        
        // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        $this->step4_VerifySetup();
        
        // –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ)
        if ($this->option('test')) {
            $this->step5_RunTest();
        }

        $this->newLine();
        $this->info('üéâ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    }

    private function step1_ClearCaches()
    {
        $this->info('üßπ –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–µ–π...');
        
        try {
            $this->call('config:clear');
            $this->call('cache:clear');
            $this->call('route:clear');
            $this->call('view:clear');
            $this->comment('‚úÖ –ö–µ—à–∏ –æ—á–∏—â–µ–Ω—ã');
        } catch (\Exception $e) {
            $this->warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–µ—à–∏: ' . $e->getMessage());
        }
    }

    private function step2_FixEnvironment()
    {
        $this->info('‚öôÔ∏è –®–∞–≥ 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞...');
        
        $envPath = base_path('.env');
        $envLines = [];
        
        // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env –µ—Å–ª–∏ –µ—Å—Ç—å
        if (file_exists($envPath)) {
            $envLines = file($envPath, FILE_IGNORE_NEW_LINES);
        }
        
        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞
        $requiredVars = [
            'APP_NAME' => 'TgStick',
            'APP_ENV' => 'production',
            'APP_DEBUG' => 'false',
            'APP_URL' => 'https://tg.sticap.ru',
            'TELEGRAM_BOT_TOKEN' => $this->botToken,
            'TELEGRAM_BOT_USERNAME' => 'Sticap_bot',
        ];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        $updated = [];
        foreach ($envLines as $line) {
            $processed = false;
            foreach ($requiredVars as $key => $value) {
                if (strpos($line, $key . '=') === 0) {
                    $updated[] = $key . '=' . $value;
                    $processed = true;
                    unset($requiredVars[$key]);
                    break;
                }
            }
            if (!$processed && trim($line)) {
                $updated[] = $line;
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        foreach ($requiredVars as $key => $value) {
            $updated[] = $key . '=' . $value;
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env
        file_put_contents($envPath, implode("\n", $updated) . "\n");
        $this->comment('‚úÖ .env —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω');
        
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—á–∏—â–∞–µ–º config cache
        $this->call('config:clear');
    }

    private function step3_ForceWebhook()
    {
        $this->info('üåê –®–∞–≥ 3: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook...');
        
        $webhookUrl = 'https://tg.sticap.ru/api/telegram/webhook';
        
        // –®–∞–≥ 3.1: –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
        $this->line('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook...');
        try {
            Http::timeout(10)->post($this->botUrl . '/deleteWebhook', [
                'drop_pending_updates' => true
            ]);
            $this->comment('‚úÖ –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω');
            sleep(2); // –ñ–¥–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        } catch (\Exception $e) {
            $this->warn('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º: ' . $e->getMessage());
        }
        
        // –®–∞–≥ 3.2: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫)
        $allowedUpdates = [
            'message',
            'edited_message', 
            'callback_query',
            'inline_query',
            'pre_checkout_query',
            'successful_payment'
        ];
        
        $attempts = 0;
        $maxAttempts = 3;
        $success = false;
        
        while ($attempts < $maxAttempts && !$success) {
            $attempts++;
            $this->line("üîÑ –ü–æ–ø—ã—Ç–∫–∞ #{$attempts} —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook...");
            
            try {
                // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                if ($attempts == 1) {
                    // –ú–µ—Ç–æ–¥ 1: JSON body
                    $response = Http::timeout(15)->post($this->botUrl . '/setWebhook', [
                        'url' => $webhookUrl,
                        'allowed_updates' => $allowedUpdates,
                        'drop_pending_updates' => true,
                        'max_connections' => 40
                    ]);
                } else {
                    // –ú–µ—Ç–æ–¥ 2: Form data
                    $response = Http::timeout(15)->asForm()->post($this->botUrl . '/setWebhook', [
                        'url' => $webhookUrl,
                        'allowed_updates' => json_encode($allowedUpdates),
                        'drop_pending_updates' => 'true',
                        'max_connections' => '40'
                    ]);
                }
                
                $data = $response->json();
                
                if ($data['ok'] ?? false) {
                    $this->comment("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ #{$attempts})");
                    $success = true;
                    sleep(3); // –ñ–¥–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
                } else {
                    $this->error("‚ùå –ü–æ–ø—ã—Ç–∫–∞ #{$attempts} –Ω–µ—É–¥–∞—á–Ω–∞: " . ($data['description'] ?? 'Unknown error'));
                    if ($attempts < $maxAttempts) sleep(2);
                }
                
            } catch (\Exception $e) {
                $this->error("‚ùå –ü–æ–ø—ã—Ç–∫–∞ #{$attempts} –æ—à–∏–±–∫–∞: " . $e->getMessage());
                if ($attempts < $maxAttempts) sleep(2);
            }
        }
        
        if (!$success) {
            $this->error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
        }
    }

    private function step4_VerifySetup()
    {
        $this->info('üîç –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
        
        try {
            $response = Http::timeout(10)->get($this->botUrl . '/getWebhookInfo');
            $data = $response->json();
            
            if ($data['ok'] ?? false) {
                $webhook = $data['result'];
                
                $this->line('üîó URL: ' . ($webhook['url'] ?: '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'));
                $this->line('‚è±Ô∏è Pending Updates: ' . $webhook['pending_update_count']);
                
                if (isset($webhook['allowed_updates']) && !empty($webhook['allowed_updates'])) {
                    $updates = $webhook['allowed_updates'];
                    $this->line('üìã Allowed Updates: ' . implode(', ', $updates));
                    
                    $required = ['pre_checkout_query', 'successful_payment'];
                    $missing = array_diff($required, $updates);
                    
                    if (empty($missing)) {
                        $this->comment('‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ updates –¥–ª—è Stars –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç!');
                    } else {
                        $this->error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ' . implode(', ', $missing));
                    }
                } else {
                    $this->comment('üìã Allowed Updates: –≤—Å–µ —Ç–∏–ø—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
                }
                
            } else {
                $this->error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook info: ' . ($data['description'] ?? 'Unknown'));
            }
            
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ' . $e->getMessage());
        }
    }

    private function step5_RunTest()
    {
        $this->info('üß™ –®–∞–≥ 5: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π...');
        $this->call('bot:test-stars-payment', ['user_id' => '1107317588']);
    }
}
