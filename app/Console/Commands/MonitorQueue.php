<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class MonitorQueue extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'queue:monitor {--watch : –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ} {--clear : –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        if ($this->option('watch')) {
            $this->watchQueue();
        } else {
            $this->showQueueStatus();
        }
    }

    private function showQueueStatus()
    {
        $this->info('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ jobs');
        $this->newLine();

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ jobs
        $pendingJobs = DB::table('jobs')->count();
        $failedJobs = DB::table('failed_jobs')->count();

        $this->comment("‚è≥ –ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {$pendingJobs}");
        $this->comment("‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á: {$failedJobs}");

        if ($pendingJobs > 0) {
            $this->newLine();
            $this->info('üìã –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–¥–∞—á–∏:');
            
            $jobs = DB::table('jobs')
                ->orderBy('available_at')
                ->limit(5)
                ->get();

            foreach ($jobs as $job) {
                $payload = json_decode($job->payload, true);
                $jobClass = $payload['displayName'] ?? 'Unknown';
                $availableAt = date('H:i:s d.m.Y', $job->available_at);
                
                $this->line("‚Ä¢ {$jobClass} - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {$availableAt}");
            }
        }

        if ($failedJobs > 0) {
            $this->newLine();
            $this->error('‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.');
            $this->comment('–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: php artisan queue:retry all');
        }

        $this->newLine();
        $this->info('üí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
        $this->line('‚Ä¢ php artisan queue:work - –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É');
        $this->line('‚Ä¢ php artisan queue:restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å worker');
        $this->line('‚Ä¢ php artisan queue:clear - –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å');
        $this->line('‚Ä¢ php artisan queue:failed - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏');
    }

    private function watchQueue()
    {
        $this->info('üëÄ –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –æ—á–µ—Ä–µ–¥—å—é (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)');
        $this->newLine();

        while (true) {
            $pendingJobs = DB::table('jobs')->count();
            $failedJobs = DB::table('failed_jobs')->count();
            
            $timestamp = now()->format('H:i:s');
            $this->line("[{$timestamp}] –û—á–µ—Ä–µ–¥—å: {$pendingJobs} | –ù–µ—É–¥–∞—á–Ω—ã—Ö: {$failedJobs}");
            
            if ($pendingJobs > 0) {
                $nextJob = DB::table('jobs')
                    ->orderBy('available_at')
                    ->first();
                
                if ($nextJob) {
                    $availableAt = date('H:i:s', $nextJob->available_at);
                    $this->comment("  –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞ –≤ {$availableAt}");
                }
            }
            
            sleep(5);
        }
    }
}
