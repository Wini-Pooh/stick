<?php

namespace App\Jobs;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use App\Models\LottoTicket;
use App\Models\TelegramUser;

class ProcessLotteryResult implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    protected $ticketId;
    protected $chatId;

    /**
     * Create a new job instance.
     */
    public function __construct($ticketId, $chatId)
    {
        $this->ticketId = $ticketId;
        $this->chatId = $chatId;
    }

    /**
     * Execute the job.
     */
    public function handle(): void
    {
        try {
            $ticket = LottoTicket::with(['lottoGame', 'telegramUser'])->find($this->ticketId);
            
            if (!$ticket) {
                Log::error('‚ùå Ticket not found for lottery result processing', [
                    'ticket_id' => $this->ticketId
                ]);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∏–ª–µ—Ç –µ—â—ë –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            if ($ticket->is_winner !== null) {
                Log::info('‚ö†Ô∏è Ticket already processed', [
                    'ticket_id' => $this->ticketId,
                    'is_winner' => $ticket->is_winner
                ]);
                return;
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ—Ç–µ—Ä–µ–∏
            $isWinner = $this->determineWinningResult($ticket);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∏–ª–µ—Ç
            $winnings = 0;
            if ($isWinner) {
                $winnings = $ticket->lottoGame->getPotentialWinnings();
            }

            $ticket->update([
                'is_winner' => $isWinner,
                'winnings' => $winnings,
                'drawn_at' => now(),
                'status' => 'completed'
            ]);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            $this->sendResult($ticket, $isWinner);

            // –ï—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª - –Ω–∞—á–∏—Å–ª—è–µ–º –∑–≤—ë–∑–¥—ã
            if ($isWinner && $winnings > 0) {
                $this->creditStarsToUser($ticket->telegramUser, $winnings, $ticket);
            }

            Log::info('‚úÖ Lottery result processed', [
                'ticket_id' => $this->ticketId,
                'is_winner' => $isWinner,
                'winnings' => $winnings,
                'user_id' => $ticket->telegram_user_id
            ]);

        } catch (\Exception $e) {
            Log::error('‚ùå Error processing lottery result', [
                'ticket_id' => $this->ticketId,
                'chat_id' => $this->chatId,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            $this->sendErrorMessage();
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∏–≥—Ä—ã—à–∞
     */
    private function determineWinningResult(LottoTicket $ticket): bool
    {
        $game = $ticket->lottoGame;
        $random = mt_rand(1, 10000) / 10000; // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1
        
        Log::info('üé≤ Lottery draw result', [
            'ticket_id' => $ticket->id,
            'ticket_number' => $ticket->ticket_number,
            'random_value' => $random,
            'win_chance' => $game->win_chance,
            'is_winner' => $random <= $game->win_chance
        ]);

        return $random <= $game->win_chance;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    private function sendResult(LottoTicket $ticket, bool $isWinner): void
    {
        $botToken = env('TELEGRAM_BOT_TOKEN', '8410914085:AAEkR3kyRw-lvb8WRP0MRQugvpEH-fkhLp4');
        $botUrl = "https://api.telegram.org/bot{$botToken}";

        if ($isWinner) {
            $text = "üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í–´ –í–´–ò–ì–†–ê–õ–ò! üéâ\n\n";
            $text .= "üéüÔ∏è –ë–∏–ª–µ—Ç: {$ticket->ticket_number}\n";
            $text .= "üé∞ –ò–≥—Ä–∞: {$ticket->lottoGame->name}\n";
            $text .= "üí∞ –í–∞—à –≤—ã–∏–≥—Ä—ã—à: {$ticket->winnings} ‚≠ê\n\n";
            $text .= "‚ú® –ó–≤—ë–∑–¥—ã —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç!\n";
            $text .= "üéä –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –Ω–∞—à–µ–π –ª–æ—Ç–µ—Ä–µ–µ!\n\n";
            $text .= "üéÆ –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start";
        } else {
            $text = "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ —É–¥–∞—á–∞ –±—ã–ª–∞ –Ω–µ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ\n\n";
            $text .= "üéüÔ∏è –ë–∏–ª–µ—Ç: {$ticket->ticket_number}\n";
            $text .= "üé∞ –ò–≥—Ä–∞: {$ticket->lottoGame->name}\n";
            $text .= "üí´ –†–µ–∑—É–ª—å—Ç–∞—Ç: –ü—Ä–æ–∏–≥—Ä—ã—à\n\n";
            $text .= "üí™ –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑—ë—Ç!\n";
            $text .= "üçÄ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞: " . ($ticket->lottoGame->win_chance * 100) . "%\n\n";
            $text .= "üéÆ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start";
        }

        $keyboard = [
            'inline_keyboard' => [
                [
                    ['text' => 'üé∞ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞', 'callback_data' => 'play_lotto'],
                ],
                [
                    ['text' => 'üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', 'callback_data' => 'my_results'],
                    ['text' => 'üèÜ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', 'callback_data' => 'all_results'],
                ]
            ]
        ];

        Http::post($botUrl . '/sendMessage', [
            'chat_id' => $this->chatId,
            'text' => $text,
            'reply_markup' => json_encode($keyboard),
            'parse_mode' => 'HTML'
        ]);
    }

    /**
     * –ù–∞—á–∏—Å–ª–∏—Ç—å –∑–≤—ë–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    private function creditStarsToUser(TelegramUser $user, int $amount, LottoTicket $ticket): void
    {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            $user->increment('stars_balance', $amount);

            // –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            \App\Models\StarTransaction::create([
                'telegram_user_id' => $user->id,
                'type' => 'lottery_win',
                'amount' => $amount,
                'reason' => "–í—ã–∏–≥—Ä—ã—à –≤ –ª–æ—Ç–µ—Ä–µ–µ. –ë–∏–ª–µ—Ç: {$ticket->ticket_number}",
                'transaction_id' => $ticket->ticket_number,
                'metadata' => [
                    'ticket_id' => $ticket->id,
                    'game_id' => $ticket->lotto_game_id,
                    'ticket_number' => $ticket->ticket_number,
                    'game_name' => $ticket->lottoGame->name
                ]
            ]);

            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥—ã —á–µ—Ä–µ–∑ Telegram API (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
            $this->tryGiftStarsViaTelegram($user, $amount, $ticket);

            Log::info('üí∞ Stars credited to user', [
                'user_id' => $user->telegram_id,
                'amount' => $amount,
                'new_balance' => $user->fresh()->stars_balance,
                'ticket_id' => $ticket->id
            ]);

        } catch (\Exception $e) {
            Log::error('‚ùå Error crediting stars to user', [
                'user_id' => $user->telegram_id,
                'amount' => $amount,
                'ticket_id' => $ticket->id,
                'error' => $e->getMessage()
            ]);
        }
    }

    /**
     * –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥—ã —á–µ—Ä–µ–∑ Telegram API
     */
    private function tryGiftStarsViaTelegram(TelegramUser $user, int $amount, LottoTicket $ticket): void
    {
        try {
            $botToken = env('TELEGRAM_BOT_TOKEN', '8410914085:AAEkR3kyRw-lvb8WRP0MRQugvpEH-fkhLp4');
            $botUrl = "https://api.telegram.org/bot{$botToken}";

            // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –∑–≤—ë–∑–¥ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è API)
            $response = Http::post($botUrl . '/sendGift', [
                'user_id' => $user->telegram_id,
                'gift_id' => 'star_gift_' . $amount, // –ü—Å–µ–≤–¥–æ ID –ø–æ–¥–∞—Ä–∫–∞
                'text' => "üéâ –í–∞—à –≤—ã–∏–≥—Ä—ã—à –≤ –ª–æ—Ç–µ—Ä–µ–µ!\n–ë–∏–ª–µ—Ç: {$ticket->ticket_number}\n–í—ã–∏–≥—Ä—ã—à: {$amount} ‚≠ê"
            ]);

            if (!$response->successful()) {
                Log::info('‚ÑπÔ∏è Gift stars via Telegram API not available, using database balance', [
                    'user_id' => $user->telegram_id,
                    'amount' => $amount,
                    'response' => $response->json()
                ]);
            }

        } catch (\Exception $e) {
            Log::info('‚ÑπÔ∏è Telegram Stars gifting not supported, using database balance', [
                'user_id' => $user->telegram_id,
                'amount' => $amount,
                'error' => $e->getMessage()
            ]);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    private function sendErrorMessage(): void
    {
        $botToken = env('TELEGRAM_BOT_TOKEN', '8410914085:AAEkR3kyRw-lvb8WRP0MRQugvpEH-fkhLp4');
        $botUrl = "https://api.telegram.org/bot{$botToken}";

        $text = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ª–æ—Ç–µ—Ä–µ–∏.\n\n";
        $text .= "üîÑ –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.\n";
        $text .= "üí∞ –ï—Å–ª–∏ –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏, —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n\n";
        $text .= "üìû –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support";

        Http::post($botUrl . '/sendMessage', [
            'chat_id' => $this->chatId,
            'text' => $text
        ]);
    }
}
