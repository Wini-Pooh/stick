<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Telegram Mini App</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--tg-theme-bg-color, #ffffff);
            color: var(--tg-theme-text-color, #000000);
            padding: 16px;
            min-height: 100vh;
        }
        
        .container {
            max-width: 600px;
            margin: 0 auto;
        }
        
        .header {
            text-align: center;
            margin-bottom: 24px;
            padding: 20px;
            background: var(--tg-theme-secondary-bg-color, #f0f0f0);
            border-radius: 12px;
        }
        
        .profile-section, .debug-section {
            background: var(--tg-theme-secondary-bg-color, #f8f8f8);
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 16px;
        }
        
        .section-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 12px;
            color: var(--tg-theme-text-color, #000);
        }
        
        .user-info {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 16px;
        }
        
        .avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: var(--tg-theme-button-color, #3390ec);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }
        
        .user-details {
            flex: 1;
        }
        
        .username {
            font-weight: 600;
            margin-bottom: 4px;
        }
        
        .user-id {
            font-size: 14px;
            color: var(--tg-theme-hint-color, #999);
        }
        
        .debug-info {
            background: #f5f5f5;
            border-radius: 8px;
            padding: 12px;
            font-family: monospace;
            font-size: 12px;
            white-space: pre-wrap;
            max-height: 400px;
            overflow-y: auto;
        }
        
        .loading {
            text-align: center;
            color: var(--tg-theme-hint-color, #999);
            padding: 20px;
        }
        
        .error {
            background: #ffebee;
            color: #c62828;
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 16px;
        }
        
        .button {
            background: var(--tg-theme-button-color, #3390ec);
            color: var(--tg-theme-button-text-color, #ffffff);
            border: none;
            border-radius: 8px;
            padding: 12px 20px;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
            margin: 8px 0;
        }
        
        .button:hover {
            opacity: 0.8;
        }
        
        .status-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 8px;
        }
        
        .status-online {
            background: #4caf50;
        }
        
        .status-offline {
            background: #f44336;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ Telegram Mini App</h1>
            <p>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</p>
        </div>

        <div class="profile-section">
            <h2 class="section-title">üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
            <div id="profile-content" class="loading">
                –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...
            </div>
            <button class="button" onclick="loadProfile()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</button>
        </div>

        <div class="debug-section">
            <h2 class="section-title">üêõ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
            <div id="debug-content" class="loading">
                –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...
            </div>
            <button class="button" onclick="loadDebugInfo()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å debug</button>
        </div>

        <div class="debug-section">
            <h2 class="section-title">‚öôÔ∏è Telegram WebApp API</h2>
            <div id="webapp-info" class="debug-info"></div>
        </div>
    </div>

    <script>
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        let tg = window.Telegram.WebApp;
        
        // –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å WebApp –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        tg.expand();
        
        // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É Telegram
        document.body.style.background = tg.themeParams.bg_color || '#ffffff';
        document.body.style.color = tg.themeParams.text_color || '#000000';
        
        // –ü–æ–ª—É—á–∏—Ç—å initData –∏–∑ URL –∏–ª–∏ Telegram WebApp
        const urlParams = new URLSearchParams(window.location.search);
        const initDataFromUrl = urlParams.get('initData');
        const initData = initDataFromUrl || tg.initData || '';
        
        console.log('InitData:', initData);
        console.log('Telegram WebApp object:', tg);
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Telegram WebApp
        function showWebAppInfo() {
            const webappInfo = {
                initData: tg.initData,
                initDataUnsafe: tg.initDataUnsafe,
                version: tg.version,
                platform: tg.platform,
                colorScheme: tg.colorScheme,
                themeParams: tg.themeParams,
                isExpanded: tg.isExpanded,
                viewportHeight: tg.viewportHeight,
                viewportStableHeight: tg.viewportStableHeight,
                headerColor: tg.headerColor,
                backgroundColor: tg.backgroundColor,
                isClosingConfirmationEnabled: tg.isClosingConfirmationEnabled,
                isVerticalSwipesEnabled: tg.isVerticalSwipesEnabled
            };
            
            document.getElementById('webapp-info').textContent = JSON.stringify(webappInfo, null, 2);
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async function loadProfile() {
            try {
                const profileContent = document.getElementById('profile-content');
                profileContent.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
                
                if (!initData) {
                    throw new Error('InitData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                }
                
                const response = await fetch('{{ route("miniapp.profile") }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': '{{ csrf_token() }}',
                        'X-Telegram-Init-Data': initData
                    },
                    body: JSON.stringify({ initData: initData })
                });
                
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
                }
                
                if (data.user) {
                    const user = data.user;
                    profileContent.innerHTML = `
                        <div class="user-info">
                            <div class="avatar">
                                ${user.first_name ? user.first_name.charAt(0) : '?'}
                            </div>
                            <div class="user-details">
                                <div class="username">
                                    ${user.first_name || ''} ${user.last_name || ''}
                                    ${user.username ? '@' + user.username : ''}
                                </div>
                                <div class="user-id">ID: ${user.id}</div>
                                ${user.language_code ? `<div class="user-id">–Ø–∑—ã–∫: ${user.language_code}</div>` : ''}
                                ${user.is_premium ? '<div class="user-id">‚≠ê Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</div>' : ''}
                            </div>
                        </div>
                        <div style="font-size: 14px; color: var(--tg-theme-hint-color, #999);">
                            –î–∞—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${data.auth_date ? new Date(data.auth_date * 1000).toLocaleString() : 'N/A'}
                        </div>
                    `;
                } else {
                    profileContent.innerHTML = '<div class="error">–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
                }
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
                document.getElementById('profile-content').innerHTML = 
                    `<div class="error">–û—à–∏–±–∫–∞: ${error.message}</div>`;
            }
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        async function loadDebugInfo() {
            try {
                const debugContent = document.getElementById('debug-content');
                debugContent.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
                
                if (!initData) {
                    throw new Error('InitData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
                }
                
                const response = await fetch('{{ route("miniapp.debug") }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': '{{ csrf_token() }}',
                        'X-Telegram-Init-Data': initData
                    },
                    body: JSON.stringify({ initData: initData })
                });
                
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
                }
                
                debugContent.innerHTML = `<div class="debug-info">${JSON.stringify(data.debug_info, null, 2)}</div>`;
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
                document.getElementById('debug-content').innerHTML = 
                    `<div class="error">–û—à–∏–±–∫–∞: ${error.message}</div>`;
            }
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', function() {
            showWebAppInfo();
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å initData, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if (initData) {
                loadProfile();
                loadDebugInfo();
            } else {
                document.getElementById('profile-content').innerHTML = 
                    '<div class="error">InitData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram.</div>';
                document.getElementById('debug-content').innerHTML = 
                    '<div class="error">InitData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram.</div>';
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π Telegram WebApp
        tg.onEvent('mainButtonClicked', function() {
            tg.sendData('main_button_clicked');
        });
        
        tg.onEvent('backButtonClicked', function() {
            tg.close();
        });
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        tg.MainButton.setText('–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
        tg.MainButton.show();
        tg.MainButton.onClick(function() {
            tg.close();
        });
        
        // –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        tg.enableClosingConfirmation();
    </script>
</body>
</html>
