<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>–ó–º–µ–π–∫–∞ | Telegram Mini App</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            touch-action: none;
        }
        
        body {
            background-color: var(--tg-theme-bg-color, #000000);
            color: var(--tg-theme-text-color, #ffffff);
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            overscroll-behavior: contain;
            overflow: hidden;
            position: fixed;
            width: 100%;
            height: 100%;
        }
        
        #game-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
        }
        
        #game-canvas {
            width: 100%;
            height: 100%;
            display: block;
        }
        
        #score-display {
            position: absolute;
            top: env(safe-area-inset-top, 10px);
            left: 10px;
            padding: 5px 10px;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            border-radius: 12px;
            font-size: 18px;
            font-weight: bold;
            z-index: 100;
        }
        
        #game-over {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: none;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 200;
            color: white;
        }
        
        #game-over h2 {
            font-size: 32px;
            margin-bottom: 20px;
        }
        
        #game-over p {
            font-size: 24px;
            margin-bottom: 30px;
        }
        
        .btn {
            padding: 12px 24px;
            background-color: var(--tg-theme-button-color, #2AABEE);
            color: var(--tg-theme-button-text-color, #ffffff);
            border: none;
            border-radius: 12px;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            margin-top: 10px;
        }
        
        .controls-hint {
            position: absolute;
            bottom: env(safe-area-inset-bottom, 20px);
            left: 0;
            width: 100%;
            text-align: center;
            color: rgba(255, 255, 255, 0.6);
            font-size: 14px;
            pointer-events: none;
            opacity: 0.8;
            z-index: 100;
        }
        
        #debug-info {
            position: absolute;
            top: 50px;
            left: 10px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 10px;
            border-radius: 8px;
            font-size: 12px;
            max-width: 300px;
            z-index: 150;
            display: none;
        }
    </style>
</head>
<body>
    <div id="game-container">
        <div id="score-display">–°—á—ë—Ç: 0</div>
        <div id="debug-info"></div>
        <canvas id="game-canvas"></canvas>
        <div class="controls-hint">‚Üê –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–º–µ–π–∫–æ–π ‚Üí</div>
        <div id="game-over">
            <h2>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</h2>
            <p>–í–∞—à —Å—á—ë—Ç: <span id="final-score">0</span></p>
            <button id="restart-btn" class="btn">–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</button>
        </div>
    </div>

    <script>
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        const tg = window.Telegram.WebApp;
        tg.expand();
        tg.ready();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ —Ç–µ–º—ã Telegram
        const backgroundColor = tg.themeParams.bg_color || '#000000';
        const textColor = tg.themeParams.text_color || '#ffffff';
        const buttonColor = tg.themeParams.button_color || '#2AABEE';
        const buttonTextColor = tg.themeParams.button_text_color || '#ffffff';
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞
        document.body.style.backgroundColor = backgroundColor;
        document.body.style.color = textColor;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
        const canvas = document.getElementById('game-canvas');
        const ctx = canvas.getContext('2d');
        const scoreDisplay = document.getElementById('score-display');
        const gameOverScreen = document.getElementById('game-over');
        const finalScoreDisplay = document.getElementById('final-score');
        const restartBtn = document.getElementById('restart-btn');
        const debugInfo = document.getElementById('debug-info');
        
        let score = 0;
        let gameOver = false;
        
        // –†–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (—É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 30%)
        let cellSize = 0;
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—Ç–æ–∫ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ (–±–æ–ª—å—à–µ –∫–ª–µ—Ç–æ–∫ –¥–ª—è –º–µ–Ω—å—à–µ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è)
        const gridSize = { width: 20, height: 28 };
        
        // –ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let userAvatar = null;
        let userAvatarLoaded = false;
        let userProfileData = null;
        let avatarLoadAttempts = 0;
        
        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–º–µ–π–∫–∏
        const directions = {
            UP: { x: 0, y: -1 },
            DOWN: { x: 0, y: 1 },
            LEFT: { x: -1, y: 0 },
            RIGHT: { x: 1, y: 0 }
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        let snake = [];
        let food = null;
        let direction = directions.RIGHT;
        let nextDirection = direction;
        let gameSpeed = 150;
        let lastUpdateTime = 0;
        
        // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏
        function debugLog(message) {
            console.log('[Snake Game Debug]', message);
            const debugDiv = document.getElementById('debug-info');
            if (debugDiv) {
                debugDiv.innerHTML += message + '<br>';
                debugDiv.style.display = 'block';
            }
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Bot API
        async function getUserPhotoFromAPI(userId) {
            try {
                debugLog(`üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Bot API –¥–ª—è user_id: ${userId}`);
                
                const response = await fetch(`/miniapp/user-photo/${userId}`, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });
                
                debugLog(`üì° Bot API –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å ${response.status}`);
                
                if (response.ok) {
                    const data = await response.json();
                    debugLog(`üìä Bot API –¥–∞–Ω–Ω—ã–µ:`, data);
                    
                    if (data.success && data.photo_url) {
                        debugLog(`‚úÖ –ü–æ–ª—É—á–µ–Ω photo_url: ${data.photo_url}`);
                        return data.photo_url;
                    } else {
                        debugLog(`‚ùå Bot API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${data.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
                        if (data.telegram_error) {
                            debugLog(`üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ Telegram: ${JSON.stringify(data.telegram_error)}`);
                        }
                    }
                } else {
                    const errorData = await response.json().catch(() => ({}));
                    debugLog(`‚ùå Bot API HTTP –æ—à–∏–±–∫–∞: ${response.status}`);
                    debugLog(`üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${JSON.stringify(errorData)}`);
                }
            } catch (e) {
                debugLog(`‚ùå Bot API –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${e.message}`);
            }
            return null;
        }
        
        // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ fallback –∞–≤–∞—Ç–∞—Ä–∫–∏
        function createFallbackAvatar() {
            debugLog('üé® –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é fallback –∞–≤–∞—Ç–∞—Ä–∫—É');
            const avatarCanvas = document.createElement('canvas');
            avatarCanvas.width = 256;
            avatarCanvas.height = 256;
            const avatarCtx = avatarCanvas.getContext('2d');
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let initial = '?';
            let userName = 'Unknown';
            let userColor = '#2AABEE';
            
            if (userProfileData && userProfileData.user) {
                const user = userProfileData.user;
                userName = user.first_name || user.username || 'User';
                initial = userName[0].toUpperCase();
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (user.id) {
                    const colors = ['#2AABEE', '#229ED9', '#1E88E5', '#3F51B5', '#673AB7', '#9C27B0', '#E91E63', '#F44336', '#FF5722', '#FF9800'];
                    userColor = colors[user.id % colors.length];
                }
            } else if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
                const user = tg.initDataUnsafe.user;
                userName = user.first_name || user.username || 'User';
                initial = userName[0].toUpperCase();
                if (user.id) {
                    const colors = ['#2AABEE', '#229ED9', '#1E88E5', '#3F51B5', '#673AB7', '#9C27B0', '#E91E63', '#F44336', '#FF5722', '#FF9800'];
                    userColor = colors[user.id % colors.length];
                }
            }
            
            debugLog(`üë§ Fallback –¥–ª—è: ${userName}, –∏–Ω–∏—Ü–∏–∞–ª: ${initial}, —Ü–≤–µ—Ç: ${userColor}`);
            
            // –†–∏—Å—É–µ–º –∫—Ä—É–≥–ª—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            const gradient = avatarCtx.createRadialGradient(128, 128, 0, 128, 128, 128);
            gradient.addColorStop(0, userColor);
            gradient.addColorStop(1, adjustBrightness(userColor, -20));
            avatarCtx.fillStyle = gradient;
            avatarCtx.fillRect(0, 0, 256, 256);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–Ω–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π
            const overlayGradient = avatarCtx.createLinearGradient(0, 0, 256, 256);
            overlayGradient.addColorStop(0, 'rgba(255,255,255,0.1)');
            overlayGradient.addColorStop(1, 'rgba(0,0,0,0.1)');
            avatarCtx.fillStyle = overlayGradient;
            avatarCtx.fillRect(0, 0, 256, 256);
            
            // –†–∏—Å—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª —Å —Ç–µ–Ω—å—é
            avatarCtx.fillStyle = '#ffffff';
            avatarCtx.font = 'bold 120px -apple-system, BlinkMacSystemFont, "Segoe UI", Arial, sans-serif';
            avatarCtx.textAlign = 'center';
            avatarCtx.textBaseline = 'middle';
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å
            avatarCtx.shadowColor = 'rgba(0,0,0,0.3)';
            avatarCtx.shadowBlur = 8;
            avatarCtx.shadowOffsetX = 2;
            avatarCtx.shadowOffsetY = 2;
            
            avatarCtx.fillText(initial, 128, 128);
            
            // –£–±–∏—Ä–∞–µ–º —Ç–µ–Ω—å –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            avatarCtx.shadowColor = 'transparent';
            avatarCtx.shadowBlur = 0;
            avatarCtx.shadowOffsetX = 0;
            avatarCtx.shadowOffsetY = 0;
            
            userAvatar = avatarCanvas;
            userAvatarLoaded = true;
            debugLog('‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è fallback –∞–≤–∞—Ç–∞—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç–∏ —Ü–≤–µ—Ç–∞
        function adjustBrightness(hex, percent) {
            // –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å
            hex = hex.replace('#', '');
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB
            const r = parseInt(hex.substr(0, 2), 16);
            const g = parseInt(hex.substr(2, 2), 16);
            const b = parseInt(hex.substr(4, 2), 16);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏
            const newR = Math.max(0, Math.min(255, r + (r * percent / 100)));
            const newG = Math.max(0, Math.min(255, g + (g * percent / 100)));
            const newB = Math.max(0, Math.min(255, b + (b * percent / 100)));
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ hex
            return `#${Math.round(newR).toString(16).padStart(2, '0')}${Math.round(newG).toString(16).padStart(2, '0')}${Math.round(newB).toString(16).padStart(2, '0')}`;
        }
        
        // –¢–µ—Å—Ç –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø–æ URL (–∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤)
        async function testDirectPhotoLoad(photoUrl) {
            return new Promise((resolve) => {
                debugLog(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É: ${photoUrl}`);
                
                const img = new Image();
                img.crossOrigin = 'anonymous';
                
                const timeout = setTimeout(() => {
                    debugLog('‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ');
                    resolve(false);
                }, 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                
                img.onload = function() {
                    clearTimeout(timeout);
                    debugLog(`‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É—é: ${img.width}x${img.height}`);
                    userAvatar = img;
                    userAvatarLoaded = true;
                    resolve(true);
                };
                
                img.onerror = function() {
                    clearTimeout(timeout);
                    debugLog('‚ùå –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å');
                    resolve(false);
                };
                
                img.src = photoUrl;
            });
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        async function loadUserAvatar() {
            debugLog('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            avatarLoadAttempts++;
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
            await loadUserProfileData();
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            let photoUrl = null;
            let photoSource = 'none';
            
            // 1. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ Telegram Bot API (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            if (userProfileData && userProfileData.user && userProfileData.user.id) {
                try {
                    debugLog(`üîÑ –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Bot API –¥–ª—è user_id: ${userProfileData.user.id}`);
                    photoUrl = await getUserPhotoFromAPI(userProfileData.user.id);
                    if (photoUrl) {
                        photoSource = 'Bot API';
                        debugLog(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Bot API: ${photoUrl}`);
                        
                        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
                        const success = await testDirectPhotoLoad(photoUrl);
                        if (success) {
                            setTimeout(() => {
                                debugInfo.style.display = 'none';
                            }, 3000);
                            return;
                        }
                    }
                } catch (e) {
                    debugLog(`‚ùå –û—à–∏–±–∫–∞ Bot API: ${e.message}`);
                }
            }
            
            // 2. –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            const sources = [
                { url: userProfileData?.user?.photo_url, name: 'server profile' },
                { url: tg.initDataUnsafe?.user?.photo_url, name: 'initDataUnsafe' }
            ];
            
            for (const source of sources) {
                if (source.url && !source.url.includes('t.me/i/userpic')) {
                    debugLog(`üîÑ –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ ${source.name}: ${source.url}`);
                    const success = await testDirectPhotoLoad(source.url);
                    if (success) {
                        photoSource = source.name;
                        debugLog(`‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ ${source.name}`);
                        setTimeout(() => {
                            debugInfo.style.display = 'none';
                        }, 3000);
                        return;
                    }
                } else if (source.url) {
                    debugLog(`‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${source.name} URL: ${source.url}`);
                }
            }
            
            debugLog('‚ÑπÔ∏è –†–∞–±–æ—á–µ–≥–æ URL —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º fallback –∞–≤–∞—Ç–∞—Ä–∫—É');
            createFallbackAvatar();
            
            // –°–∫—Ä—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                debugInfo.style.display = 'none';
            }, 3000);
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async function loadUserProfileData() {
            try {
                const initData = getInitData();
                debugLog(`üîÑ InitData –¥–ª–∏–Ω–∞: ${initData ? initData.length : 0}`);
                
                if (!initData) {
                    debugLog('‚ùå InitData –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
                    return;
                }
                
                debugLog('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ /miniapp/profile-debug');
                const response = await fetch('/miniapp/profile-debug', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                    },
                    body: JSON.stringify({ initData: initData })
                });
                
                if (response.ok) {
                    userProfileData = await response.json();
                    debugLog(`‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã`);
                    if (userProfileData.user) {
                        debugLog(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userProfileData.user.first_name || 'Unknown'} (ID: ${userProfileData.user.id || 'Unknown'})`);
                        if (userProfileData.user.photo_url) {
                            debugLog(`üì∏ Photo URL –≤ –¥–∞–Ω–Ω—ã—Ö: ${userProfileData.user.photo_url}`);
                        } else {
                            debugLog('üì∏ Photo URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è');
                        }
                    }
                } else {
                    debugLog(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: ${response.status}`);
                }
            } catch (error) {
                debugLog(`‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: ${error.message}`);
            }
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ initData –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        function getInitData() {
            const urlParams = new URLSearchParams(window.location.search);
            const hashParams = new URLSearchParams(window.location.hash.substring(1));
            
            const sources = [
                hashParams.get('tgWebAppData') ? decodeURIComponent(hashParams.get('tgWebAppData')) : null,
                urlParams.get('initData'),
                tg.initData
            ];
            
            return sources.find(source => source && source.length > 0) || '';
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ fallback –∞–≤–∞—Ç–∞—Ä–∫–∏
        function createFallbackAvatar() {
            debugLog('üé® –°–æ–∑–¥–∞–µ–º fallback –∞–≤–∞—Ç–∞—Ä–∫—É');
            const avatarCanvas = document.createElement('canvas');
            avatarCanvas.width = 128;
            avatarCanvas.height = 128;
            const avatarCtx = avatarCanvas.getContext('2d');
            
            // –†–∏—Å—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            const gradient = avatarCtx.createLinearGradient(0, 0, 128, 128);
            gradient.addColorStop(0, '#2AABEE');
            gradient.addColorStop(0.5, '#229ED9');
            gradient.addColorStop(1, '#1E88E5');
            avatarCtx.fillStyle = gradient;
            avatarCtx.fillRect(0, 0, 128, 128);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let initial = '?';
            let userName = 'Unknown';
            
            if (userProfileData && userProfileData.user) {
                const user = userProfileData.user;
                userName = user.first_name || user.username || 'User';
                initial = userName[0].toUpperCase();
            } else if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
                const user = tg.initDataUnsafe.user;
                userName = user.first_name || user.username || 'User';
                initial = userName[0].toUpperCase();
            }
            
            debugLog(`üë§ Fallback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userName}, –∏–Ω–∏—Ü–∏–∞–ª: ${initial}`);
            
            // –†–∏—Å—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª
            avatarCtx.fillStyle = '#ffffff';
            avatarCtx.font = 'bold 64px Arial';
            avatarCtx.textAlign = 'center';
            avatarCtx.textBaseline = 'middle';
            avatarCtx.shadowColor = 'rgba(0,0,0,0.3)';
            avatarCtx.shadowBlur = 4;
            avatarCtx.fillText(initial, 64, 64);
            
            userAvatar = avatarCanvas;
            userAvatarLoaded = true;
            debugLog('‚úÖ Fallback –∞–≤–∞—Ç–∞—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        function initGame() {
            resizeCanvas();
            loadUserAvatar();
            
            // –°–æ–∑–¥–∞–µ–º –∑–º–µ–π–∫—É –≤ —Ü–µ–Ω—Ç—Ä–µ –ø–æ–ª—è
            const centerX = Math.floor(gridSize.width / 2);
            const centerY = Math.floor(gridSize.height / 2);
            snake = [
                { x: centerX, y: centerY },
                { x: centerX - 1, y: centerY },
                { x: centerX - 2, y: centerY }
            ];
            
            // –°—Ç–∞–≤–∏–º –µ–¥—É
            placeFood();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å—á–µ—Ç
            direction = directions.RIGHT;
            nextDirection = direction;
            score = 0;
            gameOver = false;
            gameSpeed = 150;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç
            updateScore();
            
            // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
            gameOverScreen.style.display = 'none';
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
            requestAnimationFrame(gameLoop);
        }
        
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ö–æ–ª—Å—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        function resizeCanvas() {
            const width = window.innerWidth;
            const height = window.innerHeight;
            
            canvas.width = width;
            canvas.height = height;
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –Ω–∞ 30%
            cellSize = Math.min(
                Math.floor(width / gridSize.width),
                Math.floor(height / gridSize.height)
            ) * 1.3; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –Ω–∞ 30%
        }
        
        // –†–∞–∑–º–µ—â–∞–µ–º –µ–¥—É –≤ —Å–ª—É—á–∞–π–Ω–æ–º –º–µ—Å—Ç–µ
        function placeFood() {
            const x = Math.floor(Math.random() * gridSize.width);
            const y = Math.floor(Math.random() * gridSize.height);
            
            const isOnSnake = snake.some(segment => segment.x === x && segment.y === y);
            
            if (isOnSnake) {
                placeFood();
            } else {
                food = { x, y };
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–º–µ–π–∫–∏
        function update(timestamp) {
            if (gameOver) return;
            
            if (timestamp - lastUpdateTime < gameSpeed) return;
            lastUpdateTime = timestamp;
            
            direction = nextDirection;
            
            const head = { ...snake[0] };
            
            head.x += direction.x;
            head.y += direction.y;
            
            // –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ –≥—Ä–∞–Ω–∏—Ü—ã
            if (head.x < 0) head.x = gridSize.width - 1;
            if (head.x >= gridSize.width) head.x = 0;
            if (head.y < 0) head.y = gridSize.height - 1;
            if (head.y >= gridSize.height) head.y = 0;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å —Å–∞–º–æ–π —Å–æ–±–æ–π
            if (snake.some(segment => segment.x === head.x && segment.y === head.y)) {
                endGame();
                return;
            }
            
            snake.unshift(head);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—ä–µ–¥–∞–Ω–∏–µ –µ–¥—ã
            if (head.x === food.x && head.y === food.y) {
                score += 10;
                updateScore();
                placeFood();
                
                if (gameSpeed > 50) {
                    gameSpeed -= 2;
                }
            } else {
                snake.pop();
            }
        }
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä—ã —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Ö–ª—ã—Å—Ç–∞ –∏ —á–µ—Ä–Ω–æ–π –∑–º–µ–π–∫–æ–π
        function draw() {
            ctx.fillStyle = backgroundColor;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            const offsetX = (canvas.width - cellSize * gridSize.width) / 2;
            const offsetY = (canvas.height - cellSize * gridSize.height) / 2;
            
            // –†–∏—Å—É–µ–º –µ–¥—É —Å –ø—É–ª—å—Å–∞—Ü–∏–µ–π (—É–≤–µ–ª–∏—á–µ–Ω–Ω—É—é –Ω–∞ 30%)
            const pulse = Math.sin(Date.now() / 200) * 0.12 + 0.88;
            ctx.fillStyle = '#FF4136';
            ctx.shadowColor = '#FF4136';
            ctx.shadowBlur = 8;
            drawRoundedRect(
                offsetX + food.x * cellSize + cellSize * (1 - pulse) / 2, 
                offsetY + food.y * cellSize + cellSize * (1 - pulse) / 2, 
                cellSize * pulse, 
                cellSize * pulse, 
                cellSize / 5 * pulse
            );
            ctx.shadowBlur = 0;
            
            // –†–∏—Å—É–µ–º –∑–º–µ–π–∫—É —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Ö–ª—ã—Å—Ç–∞ (—á–µ—Ä–Ω–∞—è)
            snake.forEach((segment, index) => {
                const x = offsetX + segment.x * cellSize;
                const y = offsetY + segment.y * cellSize;
                
                // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞ (—ç—Ñ—Ñ–µ–∫—Ç —Ö–ª—ã—Å—Ç–∞)
                const maxSegments = Math.min(snake.length, 10);
                const segmentProgress = Math.min(index / maxSegments, 1);
                const sizeMultiplier = 1 - (segmentProgress * 0.4); // —É–º–µ–Ω—å—à–µ–Ω–∏–µ –¥–æ 60%
                const actualSize = cellSize * sizeMultiplier;
                const offset = (cellSize - actualSize) / 2;
                
                if (index === 0) {
                    // –ì–æ–ª–æ–≤–∞ –∑–º–µ–π–∫–∏ —Å —Ä–µ–∞–ª—å–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–æ–π
                    if (userAvatarLoaded && userAvatar) {
                        ctx.save();
                        
                        // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª—É—é –º–∞—Å–∫—É
                        ctx.beginPath();
                        ctx.arc(x + cellSize/2, y + cellSize/2, actualSize/2 - 3, 0, 2 * Math.PI);
                        ctx.clip();
                        
                        // –†–∏—Å—É–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
                        ctx.drawImage(
                            userAvatar, 
                            x + offset + 3, 
                            y + offset + 3, 
                            actualSize - 6, 
                            actualSize - 6
                        );
                        
                        ctx.restore();
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—É—Ä –¥–ª—è –≥–æ–ª–æ–≤—ã (–∑–æ–ª–æ—Ç–æ–π)
                        ctx.strokeStyle = '#FFD700';
                        ctx.lineWidth = 3;
                        ctx.shadowColor = '#FFD700';
                        ctx.shadowBlur = 6;
                        ctx.beginPath();
                        ctx.arc(x + cellSize/2, y + cellSize/2, actualSize/2 - 2, 0, 2 * Math.PI);
                        ctx.stroke();
                        ctx.shadowBlur = 0;
                    } else {
                        // Fallback –¥–ª—è –≥–æ–ª–æ–≤—ã (—á–µ—Ä–Ω—ã–π —Å –∑–æ–ª–æ—Ç—ã–º –∫–æ–Ω—Ç—É—Ä–æ–º)
                        ctx.fillStyle = '#1a1a1a';
                        drawRoundedRect(x + offset, y + offset, actualSize, actualSize, actualSize / 5);
                        
                        ctx.strokeStyle = '#FFD700';
                        ctx.lineWidth = 2;
                        ctx.shadowColor = '#FFD700';
                        ctx.shadowBlur = 4;
                        ctx.beginPath();
                        ctx.roundRect(x + offset, y + offset, actualSize, actualSize, actualSize / 5);
                        ctx.stroke();
                        ctx.shadowBlur = 0;
                    }
                } else {
                    // –¢–µ–ª–æ –∑–º–µ–π–∫–∏ (—á–µ—Ä–Ω–æ–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Ö–ª—ã—Å—Ç–∞)
                    const alpha = 1 - (segmentProgress * 0.3);
                    
                    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç —Ç–µ–ª–∞ (—á–µ—Ä–Ω—ã–π)
                    ctx.fillStyle = `rgba(26, 26, 26, ${alpha})`;
                    drawRoundedRect(x + offset, y + offset, actualSize, actualSize, actualSize / 5);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–≤–µ—á–µ–Ω–∏–µ (—Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π)
                    if (index < 5) {
                        ctx.fillStyle = `rgba(64, 64, 64, ${alpha * 0.4})`;
                        const innerSize = actualSize * 0.75;
                        const innerOffset = (actualSize - innerSize) / 2;
                        drawRoundedRect(
                            x + offset + innerOffset, 
                            y + offset + innerOffset, 
                            innerSize, 
                            innerSize, 
                            innerSize / 5
                        );
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–Ω–∫–∏–π –∫–æ–Ω—Ç—É—Ä
                    if (index < 4) {
                        ctx.strokeStyle = `rgba(90, 90, 90, ${alpha * 0.6})`;
                        ctx.lineWidth = 1;
                        ctx.beginPath();
                        ctx.roundRect(x + offset, y + offset, actualSize, actualSize, actualSize / 5);
                        ctx.stroke();
                    }
                }
            });
        }
        
        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
        function drawRoundedRect(x, y, width, height, radius) {
            ctx.beginPath();
            ctx.moveTo(x + radius, y);
            ctx.lineTo(x + width - radius, y);
            ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
            ctx.lineTo(x + width, y + height - radius);
            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
            ctx.lineTo(x + radius, y + height);
            ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
            ctx.lineTo(x, y + radius);
            ctx.quadraticCurveTo(x, y, x + radius, y);
            ctx.closePath();
            ctx.fill();
        }
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        function gameLoop(timestamp) {
            update(timestamp);
            draw();
            requestAnimationFrame(gameLoop);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–∞
        function updateScore() {
            scoreDisplay.textContent = `–°—á—ë—Ç: ${score}`;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
        function endGame() {
            gameOver = true;
            finalScoreDisplay.textContent = score;
            gameOverScreen.style.display = 'flex';
            
            if ('vibrate' in navigator) {
                navigator.vibrate(200);
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞ –ü–ö)
        document.addEventListener('keydown', (e) => {
            switch (e.key) {
                case 'ArrowUp':
                    if (direction !== directions.DOWN) nextDirection = directions.UP;
                    break;
                case 'ArrowDown':
                    if (direction !== directions.UP) nextDirection = directions.DOWN;
                    break;
                case 'ArrowLeft':
                    if (direction !== directions.RIGHT) nextDirection = directions.LEFT;
                    break;
                case 'ArrowRight':
                    if (direction !== directions.LEFT) nextDirection = directions.RIGHT;
                    break;
                case 'KeyD':
                    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    debugInfo.style.display = debugInfo.style.display === 'none' ? 'block' : 'none';
                    break;
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–∞–π–ø–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        let touchStartX = 0;
        let touchStartY = 0;
        
        document.addEventListener('touchstart', (e) => {
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
        }, { passive: true });
        
        document.addEventListener('touchmove', (e) => {
            if (gameOver) return;
            e.preventDefault();
        }, { passive: false });
        
        document.addEventListener('touchend', (e) => {
            if (gameOver) return;
            
            const touchEndX = e.changedTouches[0].clientX;
            const touchEndY = e.changedTouches[0].clientY;
            
            const diffX = touchEndX - touchStartX;
            const diffY = touchEndY - touchStartY;
            
            if (Math.abs(diffX) > Math.abs(diffY)) {
                if (diffX > 30) {
                    if (direction !== directions.LEFT) nextDirection = directions.RIGHT;
                } else if (diffX < -30) {
                    if (direction !== directions.RIGHT) nextDirection = directions.LEFT;
                }
            } else {
                if (diffY > 30) {
                    if (direction !== directions.UP) nextDirection = directions.DOWN;
                } else if (diffY < -30) {
                    if (direction !== directions.DOWN) nextDirection = directions.UP;
                }
            }
        }, { passive: true });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        restartBtn.addEventListener('click', () => {
            initGame();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => {
            resizeCanvas();
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('load', () => {
            initGame();
        });
    </script>
</body>
</html>
