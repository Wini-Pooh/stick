<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Telegram Mini App - Test Page</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Custom CSS -->
    <link href="{{ asset('css/app.css') }}" rel="stylesheet">
</head>
<body class="bg-light">
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                
                <div class="test-card">
                    <h1 class="text-center mb-4">üöÄ Telegram Mini App - Test Page</h1>
                    <p class="text-center text-muted">–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Telegram Mini App.</p>
                </div>

                <div class="test-card">
                    <h2 class="h4 mb-3">üì± –ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏</h2>
                    <div class="d-grid gap-2">
                        <a href="/miniapp" class="btn btn-primary btn-lg">üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App</a>
                        <a href="/miniapp/test" class="btn btn-secondary">üß™ Test Endpoint</a>
                        <a href="/telegram/webhook-info" class="btn btn-info">üì° Webhook Info</a>
                        <a href="/telegram/set-webhook" class="btn btn-warning">‚öôÔ∏è Set Webhook</a>
                    </div>
                </div>

                <div class="test-card">
                    <h2 class="h4 mb-3">üîó –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ BotFather</h2>
                    <div class="status-info">
                        <strong>URL Mini App:</strong><br>
                        <code id="miniapp-url" class="user-select-all">{{ env('APP_URL') }}/miniapp</code>
                        <small class="d-block mt-1 text-muted">–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</small>
                    </div>
                </div>

                <div class="test-card">
                    <h2 class="h4 mb-3">üß™ –¢–µ—Å—Ç API</h2>
                    <button class="btn btn-primary" onclick="testApi()">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API</button>
                    <div id="api-result" class="mt-3"></div>
                </div>

                <div class="test-card">
                    <h2 class="h4 mb-3">üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è</h2>
                    <pre class="bg-light p-3 rounded"><code>Bot Token: {{ env('TELEGRAM_BOT_TOKEN') ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω ‚úÖ' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚ùå' }}
Bot Username: {{ env('TELEGRAM_BOT_USERNAME', '–ù–µ —É–∫–∞–∑–∞–Ω') }}
App URL: {{ env('APP_URL') }}
Environment: {{ app()->environment() }}</code></pre>
                </div>

                <div class="test-card">
                    <h2 class="h4 mb-3">üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</h2>
                    <ol class="list-group list-group-numbered">
                        <li class="list-group-item">–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ <code>.env</code> –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã <code>TELEGRAM_BOT_TOKEN</code> –∏ <code>TELEGRAM_BOT_USERNAME</code></li>
                        <li class="list-group-item">–°–æ–∑–¥–∞–π—Ç–µ Mini App –≤ @BotFather —Å URL: <code>{{ env('APP_URL') }}/miniapp</code></li>
                        <li class="list-group-item">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): <a href="/telegram/set-webhook" class="text-decoration-none">—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook</a></li>
                        <li class="list-group-item">–ù–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>/start</code></li>
                        <li class="list-group-item">–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App"</li>
                    </ol>
                </div>

            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        async function testApi() {
            const resultDiv = document.getElementById('api-result');
            resultDiv.innerHTML = '<div class="status-info">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...</div>';
            
            try {
                const response = await fetch('/miniapp/test');
                const data = await response.json();
                
                if (response.ok) {
                    resultDiv.innerHTML = `
                        <div class="status-success">‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!</div>
                        <pre class="bg-light p-3 rounded mt-2"><code>${JSON.stringify(data, null, 2)}</code></pre>
                    `;
                } else {
                    resultDiv.innerHTML = `<div class="status-error">‚ùå –û—à–∏–±–∫–∞: ${response.status}</div>`;
                }
            } catch (error) {
                resultDiv.innerHTML = `<div class="status-error">‚ùå –û—à–∏–±–∫–∞: ${error.message}</div>`;
            }
        }

        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ URL –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        document.getElementById('miniapp-url').addEventListener('click', function() {
            navigator.clipboard.writeText(this.textContent).then(() => {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                const toast = document.createElement('div');
                toast.className = 'toast position-fixed top-0 end-0 m-3';
                toast.setAttribute('role', 'alert');
                toast.innerHTML = `
                    <div class="toast-header">
                        <strong class="me-auto">üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ</strong>
                        <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
                    </div>
                    <div class="toast-body">URL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!</div>
                `;
                document.body.appendChild(toast);
                
                const bsToast = new bootstrap.Toast(toast);
                bsToast.show();
                
                toast.addEventListener('hidden.bs.toast', () => {
                    document.body.removeChild(toast);
                });
            });
        });
    </script>
</body>
</html>
